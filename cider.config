// Configuration file for the Dyalog project manager Cider.
// Relative paths refer to the folder this config file stems from.
// Use ]Cider.OpenProject to open a project that carries a file "cider.config".

{
    CIDER: {
    // These are Cider's own configuration parameters
        "projectSpace": "Fire",           // Where the project is going to live; overwrite with ]Cider.OpenProject {path} -target=#.foo
        "parent": "#",
        "source": "APLSource",            // Where does the code live? (relative to the project folder; might be empty)
        "tatinFolder": "./packages/,./packages_dev=TestCases",  // Folder(s) with installed Tatin packages        
        "lx": "Initialize",                             // Project fn; executed when everything else is done. Must be relative to projectSpace
        "io": 1,
        "ml": 1,  
        "wx": 3,
        "info_url": "",             	      // For exmaple a URL pointing to a GitHub project
    },
    
    LINK: {
    // These are LINK parameters which are passed on to LINK when Cider brings the APL code into the WS with LINK
        "arrays": 0,                          // [0|1]: 1 means that all variables are watched, 0 means that Cider does not care 
        "beforeRead": "",                     // Empty or fully qualified function name
        "beforeWrite": "",                    // Empty or fully qualified function name
     // Do not change the following LINK entries unless you a) have to and b) know exactly what you are doing:
        "caseCode": 0,                        // [0|1]; 1:add octal suffixes to preserve capitalisation on systems that ignore case
        "codeExtensions": [                   // name of vector of file extensions to be considered code
            "aplf",
            "aplo",
            "apln",
            "aplc",
            "apli",
            "dyalog",
            "apl",
            "mipage",
        ],
        "fastLoad": 0,                        // [0,1]; 1:reduce the load time by not inspecting source to detect name clashes    
        "flatten": 0,                         // [0|1]; 1:merge items from all subdirectories into target directory                                
        "forceExtensions": 0,                 // [0,1]; 1=rename existing files so they adhere to the type specific file extensions
        "forceFilenames": 1,                  // [0,1]; 1=rename existing files so their names match their contents        
        "getFilename": "",                    // Empty or fully qualified fn name to call to specify a custom file name for a given APL item                                                               
        "typeExtensions": [                   // Two-column matrix with name classes ([;1]) and extensions ([;2])
            [
                2,
                "apla",
            ],
            [
                3,
                "aplf",
            ],
            [
                4,
                "aplo",
            ],
            [
                9.1,
                "apln",
            ],
            [
                9.4,
                "aplc",
            ],
            [
                9.5,
                "apli",
            ], 
            ],
        "watch": "both",                      // [none|ns|dir|both]; which source to track for changes so the other can be synchronised  
    },
    
            
    USER: {                                   
    // User-defined stuff (ignored by Cider); what follows is an example
        // "convertFromAcre": 1,                 
    },
}
