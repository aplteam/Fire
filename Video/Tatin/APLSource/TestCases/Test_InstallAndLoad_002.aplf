 r←Test_InstallAndLoad_002(stopFlag batchFlag);⎕TRAP;res
 ;dir;src;zip;body;cfg;zipfile;installFolder;expected;src2
⍝ Pack a package with multiple files (classes) into a ZIP file and then install it. One class depends on the other.
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 r←T._Failed

 #.⎕EX TC.GetTatinRootSpace'#'
 #.⎕SHADOW'TEMP' ⋄ 'TEMP'#.⎕NS'' ⍝ Used to load stuff into
 dir←GetTempDir ⍬
 (src zip)←(⊂dir,'/'),¨'src' 'reg'
 src2←src,'/APLSource/'
 F.MkDir src2 zip

 body←':Class MyConstants' '∇r←PI' ':Access Public Shared' 'r←3.14' '∇' ':EndClass'
 (⊂body)F.NPUT src2,'/MyConstants.aplc'
 body←':Class Calc:MyConstants' '∇r←Times v' ':Access Public Shared' 'r←PI××/v' '∇' ':EndClass'
 (⊂body)F.NPUT src2,'/Calc.aplc'
 cfg←TC.InitPackageConfig ⍬
 cfg.(group name version)←'Example' 'MyConstants' '0.1.0'
 cfg.source←'APLSource'
 cfg.api←'Calc'
 TC.WritePackageConfigFile src cfg
 zipfile←TC.Pack src zip

 installFolder←GetTempDir'/Tatin_AppPackages'
 res←TC.InstallPackage('file://',zipfile)installFolder
 →T.GoToTidyUp res≢TC.GetPackageIDFromFilename zipfile

 expected←,⊂TC.GetPackageIDFromFilename⊃{⍺,'-',⍵}/cfg.(group name version)
 →T.GoToTidyUp~expected ∆LazyMatch(1+≢installFolder)↓¨F.ListDirs installFolder
 →T.GoToTidyUp~F.Exists installFolder,'/',TC.Reg.DependenciesFilename

 {}TC.LoadDependencies installFolder #.TEMP
 →T.GoToTidyUp(12×3.14)≠#.TEMP.MyConstants.Times 3 4

 r←T._OK

∆TidyUp:
 Assert 0=⊃F.RmDir dir
 #.⎕EX TC.GetTatinRootSpace'#'
⍝Done
