 r←Test_Publish_052(stopFlag batchFlag);⎕TRAP;qdmx;rc;msg;zipFilename;src1;src2;toBeDeleted
 ;dir;src;body;cfg;reg;list;index;expected;zipped;src;src3
⍝ Publish a package with a dependency were the specified version does not exist
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 r←T._Failed

 #.⎕EX TC.GetTatinRootSpace'#'
 dir←GetTempDir ⍬
 (src reg)←(⊂dir,'/'),¨'src' 'reg'
 (src1 src2)←src∘,¨'/A' '/Foo'
 F.MkDir src1 src2 reg
 toBeDeleted←''

 TC.Reg.CreateRegistry reg
 TC.MyUserSettings.AddRegistry'[local2]',reg

 body←':Namespace Foo' 'Times←{' '##.Times ⍵' '}' ':EndNamespace'
 (⊂body)F.NPUT src2,'/Foo.apln'
 cfg←TC.InitPackageConfig ⍬
 cfg.(group name version)←'Example' 'Foo' '1.0.0'
 cfg.source←'Foo.apln'
 TC.WritePackageConfigFile src2 cfg
 (rc msg zipFilename)←TC.PublishPackage src2 reg             ⍝ You might want to install a package with a not yet published dependency
 toBeDeleted,←⊂zipFilename
 Assert 200=rc

 body←':Namespace A' 'foo←{' '##.Times ⍵' '}' ':EndNamespace'
 (⊂body)F.NPUT src1,'/A.apln'
 cfg←TC.InitPackageConfig ⍬
 cfg.(group name version)←'Example' 'A' '1.0.0'
 cfg.source←'A.apln'
 TC.WritePackageConfigFile src1 cfg
 src1 TC.Dependencies.Add'Example-Foo-2.0.0'         ⍝ Only version 1.0.0 does exist!

 (rc msg zipFilename)←TC.PublishPackage src1 reg             ⍝ You might want to install a package with a not yet published dependency
 toBeDeleted,←⊂zipFilename
 →T.GoToTidyUp rc≠200                                        ⍝ And that should work!
 →T.GoToTidyUp 0=≢zipFilename

 r←T._OK

∆TidyUp:
 Assert 0=⊃F.RmDir dir
 Assert TC.MyUserSettings.RemoveRegistry'[local2]'
 #.⎕EX TC.GetTatinRootSpace'#'
 F.DeleteFile toBeDeleted
⍝Done
