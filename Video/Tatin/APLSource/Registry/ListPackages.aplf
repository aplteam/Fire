 r←{list}ListPackages(uri parms);packageID;registryPath;fuzzy;tags;list;noOfHyphens;noOfDots;uniqueIDs;list2;since
⍝ Documentation see ##.Client.ListPackages
 'No registry specified'Assert 0<≢uri
 parms←CheckParmsForListPackages parms
 r←(0,(1+parms.date))⍴⍬
 (registryPath packageID)←SeparateUriAndPackageID uri
 registryPath←F.ExpandPath registryPath
 parms.date{⍺:⍺ ⋄ 0≢⊃⍵}←parms.since
 :If 0=⎕NC'list'
     list←(parms.date)GetAllPackages registryPath
 :EndIf
 :If 0<≢parms.tags
     tags←','(≠⊆⊢)⎕C parms.tags
     (fuzzy list)←parms.aggregate FindTag registryPath tags list
     list←⍪list
 :EndIf
 :If 0<≢parms.group
     list←(parms.group∘≡¨GetGroupFromPackageID¨list[;1])⌿list
 :EndIf
 :If parms.info_url
     list,←AddInfoURL list registryPath
 :EndIf
 :If 0=≢packageID~'*'
     :If parms.aggregate
     :AndIf parms.date=0
         r←AggregatePackages list
     :Else
         r←list
     :EndIf
     :If 0≢⊃parms.since
         since←parms.since
         :If ' '=1↑0⍴since                             ⍝ International date format?
             since←⊃A.ToNum since~'-'                  ⍝ Convert to a number
         :EndIf
         r←(since≤{⊃A.ToNum(10↑⍵)~'-'}¨r[;2])⌿r
     :EndIf
 :Else
     noOfHyphens←'-'+.=packageID
     :Select noOfHyphens
     :Case 0                                           ⍝ Just the group
         :If 0<≢list←((packageID,'-')∘≡¨{⍵↑⍨⍵⍳'-'}¨list[;1])⌿list
             :If parms.aggregate
                 r←AggregatePackages list
             :Else
                 r←list,⊂⍬
             :EndIf
         :EndIf
     :Case 1                                           ⍝ group and name
         :If 0<≢list←((packageID,'-')∘≡¨(RemoveVersionNumber¨list[;1]),¨'-')⌿list
             :If parms.aggregate
                 r←AggregatePackages list
             :Else
                 r←list,⊂⍬
             :EndIf
         :EndIf
     :Else                                             ⍝ group, name and version, but the version mgith carry additional hyphens!
         noOfDots←'.'+.=packageID
         :Select noOfDots
         :Case 0                                       ⍝ Just major
             :If 0<≢list←((packageID,'.')∘≡¨{⍵↑⍨⍵⍳'.'}¨list[;1])⌿list
                 :If parms.aggregate
                     r←0 AggregatePackages list
                 :Else
                     r←list,⊂⍬
                 :EndIf
             :EndIf
         :Case 1                                       ⍝ major and minor
             :If 0<≢list←((packageID,'.')∘≡¨{'.',⍨⍵/⍨2>+\'.'=⍵}¨list[;1])⌿list
                 :If parms.aggregate
                     r←⍉⍪{(1⊃⍵)(≢⍵)}RemovePatch¨,list
                 :Else
                     r←list,⊂⍬
                 :EndIf
             :EndIf
         :Else
             :If (⊂packageID)∊,list                     ⍝ verbatim
                 r←1 2⍴packageID ⍬
             :EndIf
         :EndSelect
     :EndSelect
 :EndIf
⍝Done
