:Class APLProcess
⍝ Start (and eventually dispose of) an APL Process.\\
⍝ By default the version of Dyalog APL a new process is going to be created from defines which version
⍝ of APL will be started, be it development or runtime.\\
⍝ You can change that by first creating a parameter space by calling `CreateParms`, then making the necessary
⍝ adjustments, and finally passing that namespace as parameter to `⎕NEW` when instantiating `APLProcess`.\\
⍝ Instead of passing a parameter space to the constructor you can also pass a simple text vector, specifying a
⍝ workspace and possibly other command line parameters like, say, `MAXWS=32GB` and the like.\\
⍝ Notes:
⍝ * This class is designed for test cases that require one or more additional instances of APL for some reason.
⍝   For that reason it does not offer encryption for a RIDE.\\
⍝   This restriction might be lifted at a later stage depending on demand.
⍝ * The destructor of this class will attempt to kill the process that was started.\\

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
    ⍝ See also `History`
      :Access Public Shared
      r←'APLProcess' '0.4.1+23' '2021-03-01'
    ∇

    ∇ History
      :Access Public Shared
    ⍝ * 0.4.1 from 2021-01-29
    ⍝   * Package config file corrected
    ⍝ * 0.4.0 from 2021-01-29
    ⍝   * Fully transformed into a Tatin package
    ⍝ * 0.3.0 from 2020-12-19
    ⍝   * Does not :Include APLTreeUtils anymore
    ⍝   * Property `Wait` introduced
    ⍝   * Property name `Runtime` changed to `Runtime`
    ⍝   * Documentation improved
    ⍝ * 0.2.1 from 2020-08-14
    ⍝   * `Kill` now kills `Proc.ID` (self so to speak) in case ⍵ is empty.
    ⍝ * 0.2.0 from 2020-03-23
    ⍝   * File extension changed from .DYALOG to .APLC
    ⍝ * 0.1.2 from 2020-01-30
    ⍝   * Bug fix: `WaitForKill` can run into a timing issue
    ⍝ * 0.1.1 from 2020-01-29
    ⍝   * Bug fix in `Start`
    ⍝ * 0.1.0 from 2020-01-12
    ⍝   * First version (Windows only)
    ∇

    :Field Public Instance Args←''              ⍝ Command line parameter (but not session_file!).
    :Field Public Instance WorkspaceName←''     ⍝ Name of the workpsace to be loaded.
    :Field Public Instance Exe←''               ⍝ The Dyalog EXE started by `APLProcess``.
    :Field Public Instance Proc←⎕NS ''          ⍝ Instance of the .NET class `Diagnostics.Process`.
    :Field Public Instance Runtime←0            ⍝ Boolean or name of runtime executable.
    :Field Public Instance IsWin                ⍝ Bolean that is 1 only in case APLProcess runs under Windows.
    :Field Public Instance IsMacOS              ⍝ Bolean that is 1 only in case APLProcess runs under Mac-OS.

    :Field Public Shared WindowsStyleDefault←'Minimized'  ⍝ Only test cases should change this. As a consumer of this class use the Property `WindowsStyle`

    _Wait←180

    :Property Wait
    :Access Public Instance
    ⍝ How many second the destructor will wait for the process to shut down before using force
        ∇ r←get
          r←_Wait
        ∇
        ∇ set arg
          'Invalid argument'⎕SIGNAL 11/⍨~(⎕DR arg.NewValue)∊83 163
          _Wait←arg.NewValue
        ∇
    :EndProperty

    :Property IsUnix
    :Access Public Instance
        ∇ r←get
          r←0=IsWin+IsMacOS
        ∇
    :EndProperty

    :Property WindowsStyle
    :Access Public Instance
        ∇ r←get
          r←_WindowsStyle
        ∇
    :EndProperty

    ∇ make1 y;commandline;parmSpace;rt;cmd;ws;windowStyle;buff
      :Access Public Instance
      :Implements Constructor
      ⍝ `y` becomes either `parmspace` (if it is a namespace) or `commandline` (if it is a text vector).
      ⍝ `parmSpace` is a parameter namespace, usually created by calling `CreateParms`; see there.
      ⍝ `commandline` is a text vector that will be passed on the command line, like workspace name, `maxws=` etc.
      make_common
      :If 2=⎕NC'y'
      :AndIf (≡y)∊0 1
      :AndIf ' '=1↑0⍴y
          commandline←y
          parmSpace←⍬
      :ElseIf 0≡≡y
      :AndIf 9=⎕NC'y'
          parmSpace←y
          commandline←⍬
      :Else
          'Invalid right argument: must be either a parameter space or a text vector (command line)'⎕SIGNAL 11
      :EndIf
      :If (⊂parmSpace)∊''⍬
          parmSpace←CreateParms
      :EndIf
      :If ⍬≢commandline
          buff←' '(≠⊆⊢)commandline
          :If '-'≠1↑⊃buff
          :AndIf ~'='∊⊃buff
              parmSpace.WorkspaceName←⊃buff
              buff←1↓buff
          :EndIf
          parmSpace.CommandLineArgs←1↓⊃,/' ',¨buff
      :EndIf
      'Invalid window style'⎕SIGNAL 11/⍨~(⊂parmSpace.WindowsStyle)∊'Hidden' 'Maximized' 'Minimized' 'Normal'
      (RIDE_INIT OUT_FILE WorkspaceName Args _Wait)←parmSpace.(RideInit LogFilename WorkspaceName CommandLineArgs Wait)
      PATH←SourcePath
      Start parmSpace
    ∇

    ∇ make_common;Platform
      Platform←⊃#.⎕WG'APLVersion'
      IsWin←'Win'≡3↑Platform
      IsMacOS←'Mac'≡3↑Platform
      _WindowsStyle←WindowsStyleDefault
      OS←(⊃⊃⎕CLASS ⎕THIS).##.OS
    ∇

    ∇ Start ps;psi;pid;cmd;host;port;keyfile;exe;z;output;args
      :If 0=≢ps.Exe
          ps.Exe←(GetRuntimeName⍣ps.Runtime)GetCurrentExecutable ⍝ else, deduce it
      :EndIf
      Exe←ps.Exe
      args←ps.CommandLineArgs
      args,←(0≠≢RIDE_INIT)/' RIDE_INIT="',RIDE_INIT,'" RIDE_SPAWNED=1 '
      :If ~ps.Runtime
          :If (,0)≡,ps.SessionFile
              args,←' session_file="" '
          :ElseIf (,1)≡,ps.SessionFile
              ps.SessionFile←GetDefaultDseFilename ps.Exe
              args,←' session_file="',ps.SessionFile,'" '
          :ElseIf ' '=1↑0⍴ps.SessionFile
              args,←' session_file="',ps.SessionFile,'" '
          :Else
              'Invalid parameter: "SessionFile"'⎕SIGNAL 11
          :EndIf
      :EndIf
      args,←(0<≢ps.LogFilename)/' LOG_FILE="',ps.LogFilename,'" '
      ⍝ NB Always set RIDE_INIT to override current process setting
      :If IsWin
          ⎕USING←'System,System.dll'
          psi←⎕NEW Diagnostics.ProcessStartInfo,⊂ps.Exe(({0=≢⍵:⍵ ⋄ '"',(⍵~'"'),'" '}ps.WorkspaceName),args)
          psi.WindowStyle←Diagnostics.ProcessWindowStyle.⍎ps.WindowsStyle
          Proc←Diagnostics.Process.Start psi
      :Else ⍝ Unix
          :If ~∨/'LOG_FILE'⍷args            ⍝ By default...
              args,←' LOG_FILE=/dev/null '  ⍝ ... no log file
          :EndIf
          :If 0<≢'-\bx\b'⎕S 0⍠('Mode' 'M')('Greedy' 0)⊣args
              ∘∘∘ ⍝ How do we prevent ⎕LX from being executed in Ubuntu?
              cmd←'{ ',args,' ',ps.Exe,' +s -q ',ps.WorkspaceName,' -c APLPPID=$PPID 2>&1 & } ; echo $!'
          :Else
              output←(1+×≢OUT_FILE)⊃'/dev/null'OUT_FILE
              cmd←'{ ',args,' ',ps.Exe,' +s -q ',ps.WorkspaceName,' -c APLPPID=$PPID 0<&- 1>',output,' 2>&1 & } ; echo $!'
          :EndIf
          pid←⎕SH cmd
          Proc.Id←pid
          Proc.HasExited←0
          Proc.StartTime←⎕TS
      :EndIf
    ∇


    ∇ Close;count;limit
      :Access Public Instance
      Close_
    ∇

    ∇ Close_;count;limit
      :Implements Destructor
      WaitForKill&(5×Wait) 0.2 ⍝ Start a new thread to do the dirty work
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Creates a parameter namespace that will be accepted by the constructor.
    ⍝ | Name             | Description |
    ⍝ |------------------|-------------|
    ⍝ | `CommandLineArg` | By default empty. Optional command line parameters passed to `Exe`. (Don't specify a session file here!)|
    ⍝ | `Exe`            | Defaults to `''` which means that the same EXE is executed the instance was created from. Can also be a fully qualified name of the exe to be run.|
    ⍝ | `LogFilename`    | By default empty, meaning that any output is thrown away. If this is specified it is expected to be the name of a file.|
    ⍝ | `RideInit`       | By default empty. Is passed as `RIDE_INIT={RideInit}` and always accompanied by `RIDE_SPAWNED=1`.|
    ⍝ | `Runtime`        | Boolean that defaults to 0. Is ignored in case `Exe` is not empty.|
    ⍝ | `SessionFile`    | Defaults to 0 which means no session file is loaded. A 1 will load the default DSE file. May also be the fully qualified path to a DSE file.|
    ⍝ | `Wait`           | How many seconds the destructor will wait for the process to shut down before using force.|
    ⍝ | `WindowStyle`    | Defaults to "Minimized". May be "Hidden" or "Maximized"or "Normal" instead. Case sensitive.|
    ⍝ | `WorkspaceName`  | By default empty; the fully qualified name of the workspace to be loaded.|
      r←⎕NS''
      r.CommandLineArgs←''
      r.Exe←''
      r.LogFilename←''
      r.RideInit←''
      r.Runtime←0
      r.SessionFile←0
      r.WindowsStyle←WindowsStyleDefault
      r.WorkspaceName←''
      r.Wait←_Wait
      r.⎕FX'r←∆List;⎕IO' '⎕IO←⎕ML←1' 'r←{(⍵,[1.5]⎕nc¨⊂¨⍵),⍎¨⍵}(⊂''∆List'')~⍨⎕NL-2 9 3' ⍝ Vars, refs and niladic functions
    ∇

    ∇ WaitForKill(limit interval);count
      :If 0<≢Proc.⎕NL-2
          :If ~Proc.HasExited
              count←0
              :While ~Proc.HasExited
                  {}⎕DL interval
                  count←count+1
              :Until count>limit
          :EndIf ⍝ OK, force has to be used
          :Trap 11
              {}Kill Proc.Id
          :EndTrap
          :If 0=Proc.⎕NC⊂'HasExited'
              Proc.HasExited←1
          :EndIf
      :EndIf
    ∇

    ∇ r←GetCurrentExecutable;⎕USING;t;gmfn
      :If IsWin
          r←''
          'gmfn'⎕NA'U4 kernel32|GetModuleFileName* P =T[] U4'
          r←⊃⍴/gmfn 0(1024⍴' ')1024
          :If 0=≢r
              ⎕USING←'System,system.dll'
              r←2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
              r←r,(~(¯1↑r)∊'\/')/'/' ⍝ Add separator if necessary
              r←r,(Diagnostics.Process.GetCurrentProcess.ProcessName),'.exe'
          :EndIf
      :Else
          t←⊃1↓⎕SH'ps -o args -p $PPID'
          :If '"'''∊⍨⊃t  ⍝ if command begins with ' or "
              r←{⍵/⍨{∧\⍵∨≠\⍵}⍵=⊃⍵}t
          :Else
              r←{⍵↑⍨¯1+1⍳⍨(¯1↓0,⍵='\')<⍵=' '}t ⍝ otherwise find first non-escaped space (this will fail on files that end with '\\')
          :EndIf
      :EndIf
    ∇

    ∇ r←GetRuntimeName exe
    ⍝ Assumes that:
    ⍝ Windows runtime ends in "rt.exe"
    ⍝ *NIX runtime ends in ".rt"
      r←exe
      :If IsWin
          :If 'rt.exe'≢¯6↑{('rt.ex',⍵)[⍵⍳⍨'RT.EX',⍵]}exe ⍝ deal with case insensitivity
              r←'rt.exe',⍨{(~∨\⌽<\⌽'.'=⍵)/⍵}exe
          :EndIf
      :Else
          r←exe,('.rt'≢¯3↑exe)/'.rt'
      :EndIf
    ∇


    ∇ r←HasExited
      :Access Public Instance
      ⍝ Boolean that is 1 if and only if the process started by `APLProcess` has stopped running.
      r←Proc.HasExited
    ∇

    ∇ r←GetPID
      :Access Public Instance
      ⍝ Get ID of the current process
      r←Proc.Id
    ∇

    ∇ {r}←Kill pid;proc;qdmx
      :Access Public Instance
    ⍝ Attempts to stop the process with the ID `pid` (process id).\\
    ⍝ In case `pid` is empty it becomes `Proc.Id` (self so to speak).\\
    ⍝ `r` is 0 in case the process could not be stopped, including when it is not running anyway, otherwise it is 1.\\
      r←0
      :If 0=≢pid
          pid←Proc.Id
      :EndIf
      :If IsWin
          ⎕USING←'System,system.dll'
          :Trap 90
              proc←Diagnostics.Process.GetProcessById pid
          :Else
              qdmx←⎕DMX
              :If ('Process with an Id of ',(⍕pid),' is not running.')≢⎕EXCEPTION.Message
              :AndIf ('because the process (',(⍕pid),') has exited.')≢⎕EXCEPTION.Message
                  ⎕EXCEPTION.Message ⎕SIGNAL 11
              :Else
                  :Return
              :EndIf
          :EndTrap
          proc.Kill
          r←1
      :Else
          {}UNIX_IssueKill 3 pid ⍝ issue strong interrupt
          r←1
      :EndIf
    ∇

    ∇ path←SourcePath;source
    ⍝ Determine the source path of the class
      :Trap 6
          source←⍎'(⊃⊃⎕CLASS ⎕THIS).SALT_Data.SourceFile' ⍝ ⍎ works around a bug
      :Else
          :If 0=≢source←{((⊃¨⍵)⍳⊃⊃⎕CLASS ⎕THIS)⊃⍵,⊂''}5177⌶⍬
              source←⎕WSID
          :Else
              source←4⊃source
          :EndIf
      :EndTrap
      path←{(-⌊/(⌽⍵)⍳'\/')↓⍵}source
    ∇

    ∇ r←GetDefaultDseFilename exe;name;path
      name←{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}2 ⎕NQ #'GetEnvironment' 'Session_file'
      path←{⍵↓⍨1+-⌊/(⌽⍵)⍳'/\'}exe
      r←path,name
    ∇

    ∇ {r}←UNIX_IssueKill(signal pid);cmd
      signal pid←⍕¨signal pid
      cmd←'kill -',signal,' ',pid,' >/dev/null 2>&1 ; echo $?'
      r←⎕SH cmd
    ∇

:EndClass
