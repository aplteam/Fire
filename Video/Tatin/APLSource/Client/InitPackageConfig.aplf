 InitPackageConfig←{
⍝ Initialise a package config namespace
⍝ ⍵ might be empty; then it is ignored.
⍝ ⍵ might be a namespace; then the content is copied into the config namespace after
⍝ it got populated with defaults.
     cfg←Reg.CreateNamespace ⎕THIS
     cfg.api←''
     cfg.assets←''
     cfg.description←''     ⍝ max 120 chars
    ⍝cfg.date←''            ⍝ Set by the server (publishing date)
     cfg.group←''
     cfg.name←''
     cfg.source←''
     cfg.tags←''            ⍝ ","-separated list of tags
     cfg.info_url←''        ⍝ The project's home for example
     cfg.version←'0.1.0'
     cfg.io←{⊃⊃(//)⎕VFI ⍵}2 ⎕NQ #'GetEnvironment' 'default_io'
     cfg.ml←{⊃⊃(//)⎕VFI ⍵}2 ⎕NQ #'GetEnvironment' 'default_ml'
     cfg.lx←''              ⍝ Function in "code" to be called when package is established in the WS; EXPERIMENTAL
     0=≢⍵:cfg
     varsList←' '~¨⍨↓cfg.⎕NL 2
     cfg←cfg.⎕NS ⍵
     _←cfg.⎕EX'wx'          ⍝ Not anymore (since 0.61.0)
     list←(' '~¨⍨↓cfg.⎕NL 2)~' '~¨⍨↓'_'cfg.⎕NL 2    ⍝ user properties start with "_" by convention
     bool←list∊varsList,('uri' 'date')              ⍝ These are injected by the server
     ∧/bool:cfg
     msg←'Invalid propert',((1+1<+/~bool)⊃'y' 'ies'),' in config namespace: ',⊃{⍺,',',⍵}/((~bool)/list)
     msg Assert 0
 }
