 {r}←{initializeFlag}WritePackageConfigFile(path cfg);qdmx;cfg_file;assets;cfg2;tmp
⍝ Write package config file to disk.
⍝ By default several properties are checked and an error is thrown in case something is not quite right,
⍝ This can be changed by passing a 1 as ⍺. In this case two checks are NOT perfortmed:
⍝ * "source" might be empty
⍝ * "assets" is ignored, and therefore might not exist
 initializeFlag←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'initializeFlag'
 :If 0=initializeFlag
     '"source" must not be empty'Assert 0<≢cfg.source
 :EndIf
 '"source" must be simple'Assert 1=|≡cfg.source
 '"source" must be character'Assert' '=1↑0⍴cfg.source
 path←⊃1 ⎕NPARTS path,'/'
 cfg_file←path,CFG_Name
 {}ValidateVersion cfg.version
 cfg←ValidatePackageFiles cfg
 cfg←ValidateTags cfg
 cfg←ValidateAPI cfg
 :If 0=initializeFlag
     :If 0<≢assets←{0=≢⍵:⍵ ⋄ ','∊⍵:','(≠⊆⊢)⍵ ⋄ ⊆⍵}cfg.assets
         assets←path∘PolishAssetsPaths¨assets
         {}{0=≢⍵:⍬ ⋄ {'assets'ValidateAssets ⍵}¨⍵}assets
         {}path∘CheckAssetsExist¨assets
         cfg.assets←⊃{⍺,',',⍵}/assets
     :EndIf
 :EndIf
 cfg2←InitPackageConfig cfg
 'Invalid package name'Assert 0=(⎕NS''){0=≢⍵:0 ⋄ ⍺.⎕NC ⍵}cfg2.name
 tmp←cfg_file,'.tmp'
 :Trap 0
     {}cfg2.⎕EX'∆List'
     {}(⊆Reg.JSON cfg2)F.NPUT tmp 1
     {}F.DeleteFile cfg_file
     ⎕DL 0.01
     {}cfg_file ⎕NMOVE tmp
     r←cfg2
 :Else
     qdmx←⎕DMX
     qdmx.DM ⎕SIGNAL qdmx.EM
 :EndTrap
⍝Done
