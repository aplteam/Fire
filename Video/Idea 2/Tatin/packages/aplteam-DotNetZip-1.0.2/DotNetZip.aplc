:Class DotNetZip
⍝ Zipping and unzipping with .NET Core on Windows, Linux and Mac-OS.\\
⍝ This class offers three shared methods:
⍝ * `ZipFolder`
⍝ * `UnzipTo`
⍝ * `ListZipContents`\\
⍝ For more advanced features the class can also be instantiated.\\
⍝ With `⎕NEW` either a new zip file is created or an existing one is opened depending on the
⍝ arguments passed onto the constructor. By default any existing zip file is overwritten.\\
⍝ You can then use these instance methods:
⍝ * `Add`
⍝ * `Delete`
⍝ * `ExtractTo`
⍝ * `List`
⍝ * `Dispose`\\
⍝ Once instantiated the read-only property `filename` carries the name of the ZIP file.\\
⍝ Kai Jaeger - APL Team Ltd.\\
⍝ Homepage: <https://github.com/aplteam/DotNetZip/>

    ⎕IO←1 ⋄ ⎕ML←1

    ∆INIT←0

    ∇ r←Version
      :Access Public Shared
      r←'DotNetZip' '1.0.2+59' '2021-03-01'
    ∇

    ∇ History
    ⍝ * 1.0.2 from 2021-03-01
    ⍝   * Problem with backslash as separated fixed
    ⍝   * Package config corrected
    ⍝ * 1.0.1 from 2021-01-10
    ⍝   * Paths are written to a ZIP file with / rather than \, no matter what the platform is.
    ⍝     Only then can we be sure that it will work on Linux and Mac-OS due to bugs in many
    ⍝     versions of .NET and .NET Core.\\
    ⍝     `ZipFolder` does not call the corresponding .NET method in order to overcome the \ bug.
    ⍝   * The `Add` function now checks the existence of any file. Sometimes non-existent files
    ⍝     did not cause the .NET call to crash.
    ⍝ * 1.0.0 from 2020-09-21
    ⍝   * First official release. Requires Dyalog 18.0 and is delivered as a Tatin package
    ∇

    :Property  filename
    :Access Public Instance
        ∇ r←Get
          r←_filename
        ∇
    :EndProperty

    ∇ make1(zipFilename)
    ⍝ Constructor that takes just one argument: the name of the ZIP file.\\
    ⍝ If `zipFilename` already exists it is overwritten.
      :Access Public Instance
      :Implements Constructor
      overwriteFlag←0
      make zipFilename overwriteFlag
    ⍝Done
    ∇

    ∇ make2(zipFilename overwriteFlag)
    ⍝ Constructor that takes two arguments:
    ⍝ * the name of the ZIP file
    ⍝ * Boolean for `overwriteFlag`
    ⍝ `overwriteFlag` defaults to 1. If `overwriteFlag` is 0 and there is already a ZIP file with that
    ⍝ name it is not overwritten but opened.
      :Access Public Instance
      :Implements Constructor
      '"overwriteFlag" must be a Boolean'⎕SIGNAL 11/⍨~(⊂overwriteFlag)∊0 1
      make zipFilename overwriteFlag
    ⍝Done
    ∇

    ∇ make(zipFilename overwriteFlag);stream
      CheckMinVersion ⍬
      Initialize ⍬
      zipFilename←AddExtension F.ExpandPath zipFilename
      QEX_System
      :If F.Exists zipFilename
      :AndIf 0=overwriteFlag
          :Trap 90
              stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
          :Else
              99 ⎕SIGNAL⍨{⍵↓⍨1+⍵⍳':'}{⍵↑⍨¯1+⌊/⍵⍳⎕UCS 10 13}∊⍕⎕EXCEPTION
          :EndTrap
          _zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
      :Else
          F.DeleteFile zipFilename
          :Trap 90
              stream←System.IO.File.Open(zipFilename System.IO.FileMode.CreateNew)
          :Else
              99 ⎕SIGNAL⍨{⍵↓⍨1+⍵⍳':'}{⍵↑⍨¯1+⌊/⍵⍳⎕UCS 10 13}∊⍕⎕EXCEPTION
          :EndTrap
          _zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Create)
          _zip.Dispose
          ⍝ `List` is not available in "Create" mode, so we re-open it
          stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
          _zip←QuadNEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
      :EndIf
      _zip.⎕DF'[archive:',zipFilename,']'
      _filename←zipFilename
    ⍝Done
    ∇
⍝ ------------------------ Instance stuff

    ∇ {r}←{parent}Add toBeZipped;list;isDir
    ⍝ Use this to add one or more files to the ZIP file.\\
    ⍝ `toBeZipped` specifies the full path (or full paths) of what's going to be zipped. That's what's going to be
    ⍝ stored in the ZIP file.\\
    ⍝ If `toBeZipped` refers to a full path as in `C:\Foo.txt` or `/tmp/myfile` or, much more likely, refers to
    ⍝ the current directory as in `./foo.txt` then there is no need to specify the optional left argument.\\
    ⍝ If however you want to store the file `C:\Projects\Foo\docs\ReadMe.txt`, but it should be saved in the ZIP
    ⍝ file as `docs\ReadMe.txt`, then you must call `Add` like this:
    ⍝ ```
    ⍝ `C:\Projects\Foo` myDotNetZip.Add `docs\ReadMe.txt`
    ⍝ ```
    ⍝ Notes:
    ⍝ * `parent` might or might not have a trailing separator, and `toBeZipped` might or might not have a
    ⍝ leading separator: `Add` works that out.
    ⍝ * While `parent`, if specified, must be a simple string, `toBeZipped` might be simple (single file) or nested, when
    ⍝ every single item is treated as the name of a file or a folder.\\
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      parent←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'parent'
      parent←F.EnforceSlash{0=≢⍵:⍵ ⋄ ⍵,(~'/\'∊⍨¯1↑⍵)/F.CurrentSep}parent
      :If (≡toBeZipped)∊0 1
          toBeZipped←{⍵↓⍨'/\'∊⍨1⍴⍵}toBeZipped
          toBeZipped←F.EnforceSlash toBeZipped
          :If F.IsDir parent,toBeZipped
              :If 0<≢list←⊃('recursive' 1)F.Dir parent,toBeZipped,'/*'
              :AndIf 0<≢list←(F.IsFile list)/list
                  list←(≢parent)↓¨list
                  list←F.EnforceSlash¨list
                  parent∘Add_¨list
              :EndIf
          :Else
              parent Add_ toBeZipped
          :EndIf
      :Else
          toBeZipped←{⍵↓⍨'/\'∊⍨1⍴⍵}¨toBeZipped
          toBeZipped←F.EnforceSlash¨toBeZipped
          isDir←F.IsDir parent∘,¨toBeZipped
          :If ∨/~isDir
              parent∘Add_¨(~isDir)/toBeZipped
          :EndIf
          :If ∨/isDir
              parent∘Add¨isDir/toBeZipped
          :EndIf
      :EndIf
    ∇

    ∇ r←names ExtractTo folder;name;entry;writer;buff;zip;stream;rc;i;targetFilename;list;sep
    ⍝ `names` is the name of one or more zipped objects (files or directories).
    ⍝ Those will be extracted into `folder\`.\\
    ⍝ `names` may be simple (single object) or nested (vector of objects).\\         
    ⍝ There must be no file or folder of the given name in the target folder, otherwise an error is thrown.\\
    ⍝ `r` is a vector of Booleans with the same lengths as `names, carrying 1 for success and 0  otherwise,
    ⍝ However, if `names` is or contains the name of a folder the lenght of `r` may be smaller than the
    ⍝ number of files and folders extracted. Note that in such a case will result in a 0 in case a single
    ⍝ file or folder cannot be extracted.\\
    ⍝ A typical reason for a failure is that a given file or folder does not exist in the ZIP file.
      :Access Public Instance
      names←,⊆names
      r←(≢names)⍴0
      :For i :In ⍳≢names
          name←F.EnforceSlash i⊃names
          :If ⎕NULL≢entry←_zip.GetEntry⊂name
              targetFilename←F.NormalizePath folder,'/',name
              :Trap 90
                  'Create!'F.CheckPath 1⊃⎕NPARTS targetFilename
                  QEX_System
                  System.IO.Compression.ZipFileExtensions.ExtractToFile(entry targetFilename)
                  r[i]←1
              :Else
                  ⎕EXCEPTION.Message ⎕SIGNAL 11
              :EndTrap
          :Else
              :If 0<≢list←List
              :AndIf 0<≢≢∪(1⊃¨⎕NPARTS list)~⊂''
                  sep←('\'∊∊list)⌽'/\'
                  name←(sep[1]@(⍸name=sep[2]))name
              :AndIf 0<≢list←(((1+≢name)↑[2]↑list)∧.=name,sep[1])/list
                  r[i]←⊃∨/list ExtractTo¨⊂folder
              :EndIf
          :EndIf
      :EndFor
    ∇

    ∇ r←List;collection
    ⍝ Lists the contents of the ZIP file
      :Access Public Instance
      collection←⌷_zip.Entries
      r←collection.ToString
    ∇

    ∇ {r}←Delete filenames;bool;toBeDeleted
    ⍝ Delete one or more files from the ZIP.\\
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      :If 0<+/bool←(⍕¨⌷_zip.Entries)∊⊆filenames
          toBeDeleted←bool/⌷_zip.Entries
          toBeDeleted.Delete
      :EndIf
    ∇

    ∇ {r}←Dispose
    ⍝ Use this to close the `ZipArchive` instance.\\
    ⍝ Note that deleteting a instance of `DotNetZip` has the same effect as calling this method.
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      :If 0<⎕NC'_zip'
          _zip.Dispose
          ⎕EX'_zip'
      :EndIf
    ∇

⍝ ------------------------ Shared stuff

    ∇ Cleanup
      :Implements Destructor
      ⍝ Calls the `Dispose` method and deletes `_zip`
      :Trap 6 90
          _zip.Dispose
      :Case 90
          Assert'Cannot access a closed file.'≡⎕EXCEPTION.Message
      :EndTrap
      ⎕EX'_zip'
    ∇

    ∇ {r}←zipfile UnzipTo targetFolder
    ⍝ Unzip `⍵` into `⍺`.\\
    ⍝ `targetFolder` must not yet exist.
      :Access Public Shared
      r←Initialize ⍬
      QEX_System
      :Trap 6
          System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
      :Else
          ⍝ Workaround for bug Mantis 18404 from 2020-08
          ⍝ The VALUE ERROR is not really a VALUE ERROR. This appears to happen only when `DotNetZip` is instanciated
          ⍝ within `⎕SE`, the )CLEAR is issed and then again `DotNetZip` instanciated within `⎕SE`.
          ⎕EX'System'
          System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
      :EndTrap
    ⍝Done
    ∇

    ∇ {zipFilename}←sourceFolder ZipFolder zipFilename;fileList;myZip;F;∆INIT;b
    ⍝ Takes a folder and zips it. `zipFilename` must not exist.\\
    ⍝ Returns the fully expanded name of `zipFilename`.\\
    ⍝ This is a workaround thats gets around the \-problem on Linux and Mac-OS.
    ⍝ The "real" solution is named `ZipFolder_` and can be brought back once Microsoft fixes the probem.
      :Access Public Shared
      ∆INIT←0
      Initialize ⍬
      sourceFolder,←((0<≢sourceFolder)∧~'/\'∊⍨¯1↑sourceFolder)/'/'
      fileList←'recursive'F.ListFiles sourceFolder
      fileList←(≢sourceFolder)↓¨fileList
      :If ~∧/b←⎕NEXISTS sourceFolder∘,¨fileList
          ('',⊃{⍺,',',⍵}/(~b)/fileList)Assert 0
      :Else
          myZip←⎕NEW ⎕THIS(,⊂zipFilename)
          sourceFolder∘myZip.Add¨fileList
          zipFilename←myZip.filename
      :EndIf
    ∇

    ∇ {targetFile}←sourceFolder ZipFolder_ targetFile
    ⍝ Takes a folder and zips it. `target` must not exist.\\
    ⍝ Returns the fully expanded name of the `targetFile`.
    ⍝  :Access Public Shared
      Initialize ⍬
      targetFile←F.ExpandPath AddExtension targetFile
      sourceFolder←F.ExpandPath sourceFolder
      QEX_System
      System.IO.Compression.ZipFile.CreateFromDirectory sourceFolder targetFile
    ⍝Done
    ∇

    ∇ r←ListZipContents zipfile;myZip
      :Access Public Shared
    ⍝ Helper that instantiates the `DotNetZip` class just for the purpose of unzipping a zip file.
      myZip←QuadNEW ⎕THIS(zipfile 0)
      r←myZip.List
    ∇

⍝ ------------------------ Private stuff -------------------

    ∇ r←QuadNEW arg;success;counter;qdmx
    ⍝ Attempts to be successful several times in case of "being used by another process" errors with
    ⍝ increasingly long delays. This often occured when `DotNetZip` itself had just dealt with the zip file,
    ⍝ and it almost always goes away after some tries.
      success←counter←0
      :Repeat
          :Trap 90
              r←⎕NEW arg
              success←1
          :Else
              qdmx←⎕DMX
              :If ∨/'because it is being used by another process'⍷⍕⎕EXCEPTION
                  counter+←1
                  ⎕DL 0.2×counter
              :Else
                  qdmx.EM ⎕SIGNAL qdmx.EN
              :EndIf
          :EndTrap
      :Until success∨10<counter
      ('⎕NEW failed ',(⍕counter),' times')⎕SIGNAL 11/⍨10<counter
    ∇

    ∇ {r}←Initialize dummy;notwindows;netcoreset
      r←⍬
      CheckMinVersion ⍬
      :If 0=∆INIT
          F←(⊃⊃⎕CLASS ⎕THIS).##.FilesAndDirs
          notwindows←'Win'≢3↑⊃# ⎕WG'APLVersion'
          netcoreset←(,'1')≡2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
          :If notwindows∨netcoreset                      ⍝ Under Windows, switch selects .NET version
              ⍝ .NET Core bridge: Lookup by name:
              ⎕USING←',System.IO.Compression.ZipFile' ',System.IO.Compression' ',System.IO.FileSystem'
          :Else
              ⎕USING←',System.IO.Compression.DLL' ',System.IO.Compression.FileSystem.DLL'
          :EndIf
          ∆INIT←1
      :EndIf
    ∇

    ∇ {r}←parent Add_ toBeZipped
      ('Files does not exist: ',parent,toBeZipped)Assert ⎕NEXISTS parent,toBeZipped
      Delete toBeZipped      ⍝ Remove from ZIP file, simulating "overwrite"
      QEX_System
      r←System.IO.Compression.ZipFileExtensions.CreateEntryFromFile _zip(parent,toBeZipped)toBeZipped
    ∇

      AddExtension←{
      ⍝ ⍵ is a filename. If it has no extension ".zip" is added, otherwise it is left alone
          ⊃,/{(1⊃⍵),(2⊃⍵),{0=≢⍵:'.zip' ⋄ ⍵}3⊃⍵}⎕NPARTS ⍵
      }

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←3 ⋄ ⍺ ⎕SIGNAL 1↓(↑∊⍵),11}

      IfAtLeastVersion←{
      ⍝ ⍵ is supposed to be a number like 15 or 17.1, representing a version of Dyalog APL.
      ⍝ Returns a Boolean that is 1 only if the current version is at least as good.
          ⍵≤{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃# ⎕WG'APLVersion'
      }

      CheckMinVersion←{
          IfAtLeastVersion 17:shy←1
          'This class requires at least version 17.0 of Dyalog APL'⎕SIGNAL 11
      }

    ∇ {r}←QEX_System
      ⍝ Workaround for bug Mantis 18404 from 2020-08
      ⍝ The VALUE ERROR is not really a VALUE ERROR. This appears to happen only when `DotNetZip` is instanciated
      ⍝ within `⎕SE`, then )CLEAR is issued and then again `DotNetZip` instanciated within `⎕SE`.
      r←⎕EX'System'
    ∇

:EndClass
