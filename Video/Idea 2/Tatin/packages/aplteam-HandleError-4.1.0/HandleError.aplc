:Class HandleError
⍝ This class offers the method `Process`, which is useful to handle application
⍝ errors on a general (or application) level. `Process` in turn is triggered via `⎕TRAP`;
⍝ use the method `HandleError.SetTrap` in order to set `⎕TRAP` properly.\\
⍝ ## Goals
⍝ * Create an HTML page with essential information regarding the error, for example:
⍝   * Error message
⍝   * Stack
⍝   * System vars like `⎕WSID`, `⎕IO`, `⎕ML`, `⎕TNUMS`, `⎕WA`
⍝   * Current directory
⍝   * Command line
⍝   * and more\\
⍝ * Create a namespace `crash` and populate it with variables providing all
⍝   sorts of information potentially important for analyzing the error.
⍝   The namespace `crash` is saved in a component file. By default all variables
⍝   visible at the time of the crash are saved in a sub namespace of `crash` called
⍝   `Vars`.\\
⍝   In case of a threaded application this and the HTML page might be all you get
⍝   for analyzing the problem.\\
⍝ * Attempts to save an error workspace. Since no workspace can be saved when threads
⍝   are running, `HandleError` will kill all running threads but the main thread just before
⍝   attempting to save the workspace. That means that even in a multi-threaded application
⍝   you _might_ still get a saved workspace for analyzing purposes if the error happened to
⍝   occur in the main thread.\\
⍝   However, since version 4.1 it is possible to prevent the killing of threads by setting
⍝   `killThreads` to 0, meaning it defaults to 1, so no change in behaviour by default.
⍝   Set this to 0 if you intend to let the application continue, for example because an error
⍝   occurred just in a single thread, but the application as such is expected to be okay.\\
⍝ ## Parameters
⍝ All parameters can be changed by setting variables in a namespace returned by `CreateParms`,
⍝ which can then be passed as right argument to the main function `Process`.
⍝ For defaults just pass an empty vector to `Process`.\\
⍝ ## Custom stuff
⍝ You can make `Process` execute your own code by specifying a custom log function
⍝ and / or a custom function for other purposes:
⍝ * `logFunction` is supposed to be the name of a monadic function that returns a shy result.
⍝   That function must be able to deal with a simple character vector as well as vectors of
⍝   character vectors. As the name suggests it will be called by `Process` when something needs
⍝   to be logged.
⍝ * `customFns` can be used to do anything you like. A typical application for this
⍝   is sending an email to notify certain people about the crash.\\
⍝   The `customFns` must accept  a right argument. This is the parameter namespace
⍝   which holds all the parameters plus three additional variables:
⍝   * `crashFilename` holds the name used for the crash files (HTML file, workspace,
⍝     DCF file) but without `.extension`.
⍝   * `LastError` holds `⎕DMX.DM` at the moment of the crash.
⍝   * `LastErrorNumber` holds `⎕DMX.EN` at the moment of the crash.\\
⍝   The last two steps are necessary because something might go wrong inside `HandleError` and,
⍝   though trapped, as a side effect overwrite both `⎕DMX.DM` and `⎕DMX.EN`.\\
⍝   The `customFns` shall not return a result. If it does it must be "shy" and will be ignored.\\
⍝ Although both function names may use dotted syntax that would not help in case
⍝ they live in an instance of a class. In such a case use `logFunctionParent`
⍝ and `customFnsParent` respectively in order to define the parent of the functions.\\
⍝ ## Windows Event Log
⍝ `HandleError` will attempt to write to the Windows Event Log when `windowsEventSource`
⍝ is not empty. For that to work both .NET and the Dyalog bridge DLLs are required.
⍝ That means it would not work out of the box in a runtime application without you taking action,
⍝ though it would of course work in development.\\
⍝ ## How tos
⍝ * At an early stage (we don't know yet where to save stuff etc) specify an
⍝   empty vector as right argument to `SetTrap`.
⍝ * As soon as you can create a parameter space by calling `CreateParms`, assign it to something
⍝   like `#.MyParms`, make amendments and finally execute `#.⎕SHADOW 'MyParms'` from within your
⍝   `⎕LX` function. That way `Process` will be able to see `MyParms` from everywhere no matter what.\\
⍝ ## Notes
⍝ * Prior to version 2.2.0 `HandleError` saved crash files in a folder `Errors`
⍝   that was created as a sibling of either the workspace or the stand-alone
⍝   EXE. While this policy still holds true under Linux and Mac OS, under Windows
⍝   a folder with the name of either the EXE or the WS is created
⍝   within %LOCALAPPDATA%, with a sub-folder "Errors" inside it.\\
⍝   This is because under Windows the application is unlikely to have the right to
⍝   write to the directory the EXE was loaded from.\\
⍝ Kai Jaeger ⋄ APL Team Ltd\\
⍝ Homepage: <https://github.com/aplteam/HandleError>

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
      :Access Public Shared
      r←'HandleError' '4.1.0+57' '2021-07-01'
    ∇

    ∇ History
      :Access Public Shared
      ⍝ * 4.1.0
      ⍝   * Parameter `killThreads` introduced.
      ⍝   * `Process` hardened against unforseeable problems.
      ⍝   * Bug fix: `Process` executed either `⎕OFF` or `→`; in the latter case it shouldn't.
      ⍝ * 4.0.2
      ⍝   * Package config file corrected
      ⍝ * 4.0.1
      ⍝   * Documentation improved
      ⍝   * Tests polished
      ⍝ * 4.0.0
      ⍝   * BREAKING CHANGES:
      ⍝     * Requires at least Dyalog 18.0
      ⍝     * Requires the class `APLTreeUtils2`
      ⍝   * Does not `:Include APLTreeUtils` anymore
      ⍝   * Bug fixes:
      ⍝     * Empty `⎕WSID` (stand-alone-EXE!) can cause havoc (#1)
      ⍝     * `Process` does not return the name of the error workspace because the function either
      ⍝       executed `⎕OFF` or '→`. The name is now assigned to `∆ERROR_WS` in the parameter space.
      ⍝\\
      ⍝ For information regarding older versions see <https://github.com/aplteam/HandleError/releases>
    ∇

    ∇ {r}←{signal}Process parms;crash;TRAP;⎕IO;⎕ML;⎕TRAP;filename
      :Access Public Shared
    ⍝ `⎕OFF`s in runtime or if `enforceOff` is 1 but executes `→` otherwise.\\
    ⍝ In case you need to save the name of the error WS you must specify a parameter space. `HandleError` will
    ⍝ inject a variable `∆ERROR_WS` into the parameter space.\\
    ⍝ All actions `Process` will execute are performed under error trapping, so it should never fail.\\
    ⍝ `signal`: if specified this overwrites `parms.signal`; this is for test cases only.
      r←⍬
      ⎕IO←1 ⋄ ⎕ML←1
      TRAP←⎕TRAP                                    ⍝ Remember old setting (for reporting)
      ⎕TRAP←(0 1000)'C' '→∆End'                     ⍝ Make sure that it does not crash itself
      parms←⍎⍣((0≠≢parms)∧(⎕DR parms)∊320 160 80 82)⊣parms     ⍝ Convert name into reference
      :If 9≠⎕NC'parms'
      :OrIf 0=≢parms
          parms←CreateParms
      :EndIf
      :If 0<⎕NC'signal'
          parms.signal←signal
      :EndIf
      parms.(LastError LastErrorNumber)←⎕DMX.(DM EN)
      parms.(EN ENX EM Message)←⎕DMX.(EN ENX EM Message)
      CheckErrorFolder parms
      crash←CreateCrash parms TRAP
      filename←CreateFilename parms.errorFolder
      parms.∆ERROR_WS←filename
      parms.crashFilename←filename
      {}{0 ⎕TKILL ⍵}⍣parms.killThreads⊣⎕TNUMS~⎕TID   ⍝ Try to kill all threads but itself and the main thread
      :Trap 0
          WriteHtmlFile parms crash filename
      :EndTrap
      :Trap 0
          WriteToLogFile parms
      :EndTrap
      ⎕DL 0.2
      :Trap 0
          crash←SaveErrorWorkspace filename parms crash
      :Else
          crash←⎕NS''
      :EndTrap
      SaveCrash filename crash parms
      WriteToWindowsEvents parms
      ExecuteCustomFns parms
      :If 0≠parms.signal
          ⎕SIGNAL parms.signal
      :ElseIf parms.off
          :If ##.APLTreeUtils2.IsDevelopment∧0=parms.enforceOff
              PrintErrorToSession 1⊃parms.LastError
          :Else
              ⎕OFF parms.returnCode
          :EndIf
      :Else
          :If ##.APLTreeUtils2.IsDevelopment∧0=parms.enforceOff
              PrintErrorToSession 1⊃parms.LastError
          :EndIf
      :EndIf
     ∆End:⎕TRAP←TRAP
    ∇

    ∇ r←{force}SetTrap parameterSpaceName;⎕TRAP;⎕ML;⎕IO;calledFrom
      :Access Public Shared
    ⍝ Returns a vector useful to set `⎕TRAP`.
    ⍝ It behaves differently depending on whether it's a development session or not.\\
    ⍝ The right argument can be either an empty vector or the **name** of a parameter space - **not** a reference!\\
    ⍝ The left argument defaults to 0. Setting this to 1 enforces error
    ⍝ trapping even under a development exe. Useful for test cases.
      ⎕TRAP←0⍴⎕TRAP
      ⎕IO←1 ⋄ ⎕ML←0
      force←{0=⎕NC ⍵:0 ⋄ ⍎⍵}'force'
      r←(0 1000)'S'
      calledFrom←{⌽{⍵/⍨2≤+\'.'=⍵}⌽⍵}1⊃⎕XSI
      :If 0≠≢parameterSpaceName
          :If 1≠≡,parameterSpaceName
          :OrIf ~(⎕DR parameterSpaceName)∊80 82 160
              'Invalid right argument: must be a name'⎕SIGNAL 11
          :EndIf
      :EndIf
      :If 0=≢parameterSpaceName  ⍝ At a very early stage error trapping does not make sense
      :AndIf (0=##.APLTreeUtils2.IsDevelopment)∨force
          r←⊂0 'E'(calledFrom,'HandleError.Process ⍬')
      :Else
          :If (0=##.APLTreeUtils2.IsDevelopment)∨force
              r←⊂0 'E'(calledFrom,'HandleError.Process ''',parameterSpaceName,'''')
          :EndIf
      :EndIf
    ∇

    ∇ r←CreateParms;rk;buf;⎕IO;⎕ML
    ⍝ Returns a namespace with default values for the `HandleError` method
    ⍝ | Parameter    | Description|
    ⍝ | - | - |
    ⍝ | `checkErrorFolder` | Boolean that defaults to 1. If this is 1 and the folder `errorFolder` does **not** exist<<br>>it will be created. |
    ⍝ | `createHTML` | Boolean that defaults to 1. A 0 means that no HTML file will be created.|
    ⍝ | `customFns`  | Fully qualified name of a monadic function to be executed by `Process`. Useful to send an email, for example. See also `customFnsParent`.|
    ⍝ | `customFnsParent` | No default. May be a reference pointing to the parent of the `customFns`. Needed only in case the parent is a class instance since `logFunction` may use dottet syntax.|
    ⍝ | `enforceOff` | Boolean that defaults to 0. With a 1 you can force `HandleError` to `⎕OFF` no matter whether it's a runtime EXE or not. Overwrites `off`. Mainly for test cases.|
    ⍝ | `errorFolder`| Folder that keeps the component file (`crash`), the HTML page and the error WS. See below for rules.|
    ⍝ | `killThreads`| Boolean that defaults to 1, meaning that all threads that can be killed will be killed.|
    ⍝ | `logFunction`| Name of the logging function to be used. See also `logFnsParent`.|
    ⍝ | `logFnsParent` | No default. May be a reference pointing to the parent of `logFunction`. Needed only in case the parent is a class instance since `logFunction` may use dottet syntax.|
    ⍝ | `off`        | Boolean that defaults to 1 which makes `HandleError` execute `⎕OFF` with `returnCode` only in Runtime. A 0 suppresses this, executing `→` instead. See also `enforceOff`|
    ⍝ | `returnCode` | The return code passed on to `⎕OFF`.|
    ⍝ | `saveCrash`  | Boolean that defaults to 1.<<br>>A 0 suppresses the creation of `crash` & a component file in which `crash` is saved.|
    ⍝ | `saveErrorWS`| Boolean that defaults to 1.<<br>>A 0 suppresses the creation of a crash workspace. There is no point in attempting<<br>>to save a WS in a multi-threaded application for example.|
    ⍝ | `saveVars`   | Boolean that defaults to 1.<<br>>Is ignored when `saveCrash` is 0. If 1 all visible variables are saved in a<<br>>sub namespace `Vars` within `crash`.|
    ⍝ | `signal`     | When `off` is 0 and `signal` is not 0 then `signal` is `⎕SIGNAL`led by `Process`.<<br>>This can be used for a restart attempt.|
    ⍝ | `trapInternalErrors` | By default all internal errors are trapped:<<br>>`Process` should never crash an application.|
    ⍝ | `trapSaveWSID`       | Boolean that defaults to 1. Makes sure that the `⎕SAVE` statement is guarded.<<br>>Useful to trace through it without a problem in versions prior to 14.1.|
    ⍝ | `windowsEventSource` | Name of the Windows Event Log to write to. Ignored when empty.|
    ⍝ | `addToMsg`           | Will be added to the log file as well as the Windows Event Log messages.<<br>>Mainly for test cases.|\\
    ⍝ Since version 2.2.0 `errorFolder` defaults to an empty vector. Assuming that the WS or the stand-alone EXE have the name "Foo" the following rules hold true:
    ⍝ * If `errorFolder` is empty then it defaults to "%LOCALAPPDATA%/Foo/Errors" under Windows and "Errors/" in the current
    ⍝   directory otherwise.
    ⍝ * If `errorFolder` is "Errors/" then this folder will be expected in the current directory.
    ⍝ * If `errorFolder` is an absolute path it is assumed that the last part is the folder that shall hold the crash files.\\
    ⍝ In all three instances if the folder in question does not exist but `checkErrorFolder` is 1 the folder will be created.
      :Access Public Shared
      ⎕IO←0 ⋄ ⎕ML←3
      r←⎕NS''
      r.⎕FX'r←∆List;⎕IO' '⍝ List all variables and possible references in this namespace' '⎕IO←0' 'r←{⍵,[0.5]⍎¨⍵}'' ''~¨⍨↓⎕NL 2 9'
      r.checkErrorFolder←1
      r.createHTML←1
      r.customFns←''
      r.customFnsParent←⍬
      r.enforceOff←0
      r.errorFolder←''
      r.killThreads←1
      r.logFunction←''
      r.logFunctionParent←⍬
      r.off←1
      r.returnCode←1
      r.saveCrash←1
      r.saveErrorWS←1
      r.saveVars←1
      r.signal←0
      r.trapInternalErrors←1
      r.trapSaveWSID←1
      r.windowsEventSource←''
      r.addToMsg←''
     ⍝Done
    ∇

    ∇ {r}←ReportErrorToWindowsLog(appName message);⎕USING
    ⍝ Reports an error to the Windows Event Log, by default to source="APL".\\
    ⍝ Note that the Dyalog bridge DLLs are required for this to work.
      :Access Public Shared
      r←⍬
      ⎕USING←'System,system.dll' 'System.Diagnostics,system.dll'
      :If 0=≢appName
          appName←'APL'
      :EndIf
      message←⊆message
      WriteWindowsLog_ appName EventLogEntryType.Error message
    ∇

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Private stuff

    MarkupAsTableRow←{CR,'<tr><td><b>',⍺,((0<⍴⍺)/': </b></td><td>'),(⍕⍵),'</td></tr>'}

    ∇ r←CR
      r←⎕UCS 13
    ∇


    ∇ {html}←WriteHtmlFile(parms crash filename);If
      :If parms.createHTML
          html←AssembleHTML parms crash
          :Trap (parms.trapInternalErrors)/0
              (⊂html)⎕NPUT(filename,'.html')1
          :Else
              :Trap parms.trapInternalErrors/0
                  :If ##.APLTreeUtils2.IsDevelopment
                      11 ⎕SIGNAL'Writing HTML file failed: ',1⊃parms.LastError
                  :EndIf
              :EndTrap
          :EndTrap
      :Else
          html←''
      :EndIf
    ∇

    ∇ html←AssembleHTML(parms crash)
      html←'<!DOCTYPE html>',CR
      html,←'<html lang="en">',CR
      html,←'<head>',CR
      html,←'  <meta charset="utf-8">',CR
      html,←'  <title>',('/'##.APLTreeUtils2.Last filename),'</title>',CR
      html,←'  <style media="screen" type="text/css">',CR
      html,←'    pre {',CR
      html,←'   font-family: "APL385 Unicode"; font-size: 14px;',CR
      html,←'   }',CR
      html,←'   h1 {',CR
      html,←'   font-family: "Courier New";',CR
      html,←'   }',CR
      html,←'   table#apl {',CR
      html,←'   font-family: "APL385 Unicode"; font-size: 14px;',CR
      html,←'   }',CR
      html,←'  </style>',CR
      html,←'</head>',CR
      html,←'<body>',CR
      html,←'  <h1>',('/'##.APLTreeUtils2.Last filename),'</h1>',CR
      html,←'  <table id="apl">'
      html,←'  Version'MarkupAsTableRow⍕'#'⎕WG'APLVersion'
      html,←'  ⎕WSID'MarkupAsTableRow⍕{'/'##.APLTreeUtils2.Last ⍵ ⋄ ⍵}⍣('/'∊crash.WSID)⊣1↓' ',crash.WSID  ⍝ Enforce ⎕DR 80/82 with 1↓' ',
      html,←'  ⎕IO'MarkupAsTableRow⍕⎕IO
      html,←'  ⎕ML'MarkupAsTableRow⍕⎕ML
      html,←'  ⎕WA'MarkupAsTableRow⍕⎕WA
      html,←'  ⎕TNUMS'MarkupAsTableRow⍕⎕TNUMS
      html,←'  Category'MarkupAsTableRow crash.Category
      html,←'  EM'MarkupAsTableRow crash.EM
      html,←'  HelpURL'MarkupAsTableRow crash.HelpURL
      html,←'  EN'MarkupAsTableRow⍕crash.EN
      html,←'  ENX'MarkupAsTableRow⍕crash.ENX
      html,←'  InternalLocation'MarkupAsTableRow⍕crash.InternalLocation
      html,←'  Message'MarkupAsTableRow crash.Message
      html,←'  OSError'MarkupAsTableRow⍕crash.OSError
      html,←'  Current Dir'MarkupAsTableRow⍕crash.CurrentDir
      html,←'  Command line'MarkupAsTableRow⍕crash.CommandLine
      :If 0≠≢parms.addToMsg
          html,←'  Added Msg'MarkupAsTableRow parms.addToMsg
      :EndIf
      html,←'  </table>'
      html,←'<p><b>Stack:</b></p>',CR
      :If 0≠≢crash.XSI
          html,←'<pre>',(⊃,/CR,¨crash.XSI,¨{'[',(⍕⍵),']'}¨crash.LC),CR,'</pre>',CR
      :EndIf
      html,←'<p><b>Error Message:</b></p>',CR
      :If 0≠≢crash.DM
          html,←'<pre>',(ExchangeHtmlChars⊃,/CR,¨crash.DM),CR,'</pre>',CR
      :EndIf
      html,←'</body>',CR
      html,←'</html>',CR
    ∇

    ∇ {r}←WriteWindowsLog_(source type message);eventLog;sep;⎕USING;buffer;⎕ML
    ⍝ This function writes to the Windows Event Log.
    ⍝ "message" must either be a string or a vector of strings.
    ⍝ "type"
      ⎕ML←1
      r←⍬
      ⎕USING←'System,system.dll' 'System.Diagnostics,system.dll'
    ⍝ Should check the source/log exist.
      eventLog←⎕NEW EventLog
      eventLog.Source←source
      sep←⎕UCS 10
      buffer←¯1↓⊃,/message,¨sep
      eventLog.WriteEntry buffer type
    ∇

    ∇ html←ExchangeHtmlChars html;b
      :If 0<+/b←html='&'
          (b/html)←⊂'&amp;'
          html←∊html
      :EndIf
      :If 0<+/b←html='<'
          (b/html)←⊂'&lt;'
          html←∊html
      :EndIf
      :If 0<+/b←html='>'
          (b/html)←⊂'&gt;'
          html←∊html
      :EndIf
    ∇

    ∇ WriteToLogFile parms;fns;parent
      :If 0≠≢parms.logFunction
          :Trap (parms.trapInternalErrors)/0
              :If '.'∊parms.logFunction
                  fns←⍎parms.logFunction
              :Else
                  :If ⍬≢parms.logFunctionParent
                      fns←parms.logFunctionParent⍎parms.logFunction
                  :Else
                      'Cannot find the log function'⎕SIGNAL 6
                  :EndIf
              :EndIf
              fns'*** Error'
              fns'Error number=',⍕parms.LastErrorNumber
              fns parms.LastError
              :If 0≠≢parms.addToMsg
                  fns parms.addToMsg
              :EndIf
          :Else
          ⍝ Useful to realize in the tracer that something went wrong
          :EndTrap
      :EndIf
    ∇

    ∇ ExecuteCustomFns parms;fns;parent
      :If 0≠≢parms.customFns
          :Trap (parms.trapInternalErrors)/0
              :If '.'∊parms.customFns
                  fns←⍎parms.customFns
              :Else
                  :If ⍬≢parms.customFnsParent
                      fns←parms.customFnsParent⍎parms.customFns
                  :Else
                      'Cannot find the custom function'⎕SIGNAL 6
                  :EndIf
              :EndIf
              fns parms
          :Else
        ⍝ Useful to realize in the tracer that something went wrong
          :EndTrap
      :EndIf
    ∇

    ∇ {crash}←SaveErrorWorkspace(filename parms crash);wsid;lx
      :If parms.saveErrorWS
          wsid←⎕WSID
          ⎕WSID←filename
          lx←⎕LX
          ⎕LX←'⎕TRAP←0 ''S'' ⍝',⎕LX
          :Trap parms.trapSaveWSID/0
              ⎕SAVE ⎕WSID
          :Else
              crash.SaveFailed←⎕DMX.Message
          :EndTrap
          ⎕WSID←wsid       ⍝ Potentially important (for example when running test cases)
          ⎕LX←lx
      :EndIf
     ∆End:
    ∇

    ∇ crash←CreateCrash(parms Trap)
      crash←⎕NS''
      crash.(AN DM EN XSI LC WSID TID TNUMS)←⎕AN ⎕DM ⎕EN ⎕XSI ⎕LC ⎕WSID ⎕TID ⎕TNUMS
      crash.WA←⎕WA
      crash.Trap←Trap
      crash.CurrentDir←##.FilesAndDirs.PWD
      crash.CommandLine←2 ⎕NQ'#' 'GetCommandLine'
      :Trap (parms.trapInternalErrors)/0
          crash.(Category DM EM HelpURL EN ENX InternalLocation Message OSError)←⎕DMX.(Category DM EM HelpURL EN ENX InternalLocation Message OSError)
          crash.(XSI LC)←1↓¨crash.(XSI LC)
      :EndTrap
      :If 0≠≢parms.addToMsg
          crash.addedMsg←parms.addToMsg
      :EndIf
      :If parms.saveVars
          crash←SaveVisibleVars crash
      :EndIf
    ∇


    ∇ {r}←SaveCrash(filename crash parms);tno
      :If parms.saveCrash
          :Trap (parms.trapInternalErrors)/0
              tno←filename ⎕FCREATE 0
              crash ⎕FAPPEND tno  ⍝ Might fail with a WS FULL
          :Else
              :Trap 0
                  ⎕DMX.DM ⎕FAPPEND tno
              :EndTrap
          :EndTrap
          :Trap 0 ⋄ ⎕FUNTIE tno ⋄ :EndTrap
      :EndIf
    ∇

      CreateFilename←{
          folder←⍵
          folder,←((0≠≢folder)∧'/'≠¯1↑folder)/'/'
          folder,({⍵↑⍨¯1+⍵⍳'.'}2⊃##.APLTreeUtils2.SplitPath crash.WSID),'_',14 0⍕100⊥6↑⎕TS}

    ∇ {r}←WriteToWindowsEvents parms;msg
      r←⍬
      :If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
      :AndIf 0≠≢parms.windowsEventSource
          :Trap (parms.trapInternalErrors)/0
              msg←⊂'Application has crashed, RC=',(⍕crash.EN),'; MSG=',crash.EM
              msg,←(0<≢parms.errorFolder)/''('Details can be found in ',parms.errorFolder)
              :If 0≠≢parms.addToMsg
                  msg,←{(≡⍵)∊0 1:,⊂,⍵ ⋄ ⍵}parms.addToMsg
              :EndIf
              ReportErrorToWindowsLog parms.windowsEventSource msg
          :EndTrap
      :EndIf
    ∇

    ∇ {r}←PrintErrorToSession msg
      r←⍬
      ⎕←'HandleError.Process caught ',msg
    ∇

    ∇ crash←SaveVisibleVars crash;rf;list;this
      rf←{⊃⍵~⊃⍵}⎕RSI
      list←' '~¨⍨↓rf.⎕NL 2
      'Vars'crash.⎕NS''
      :For this :In list
          ⍎'crash.Vars.',this,'←rf.⍎this'
      :EndFor
    ∇

    ∇ {r}←CheckErrorFolder parms;buff;wsid
      r←⍬
      :If 0=≢parms.errorFolder
          :If 0=≢wsid←⎕WSID
              ⎕WSID←'Error-WS'
          :EndIf
          :If 0=≢buff←2⊃⎕NPARTS wsid
              buff←2⊃⎕NPARTS{'"'∊⍵:1↓⍵/⍨1=+\'"'=⍵ ⋄ ⍵↑⍨¯1+⍵⍳' '}2 ⎕NQ'#' 'GetCommandLine' ⍝ Probably a stand-alone EXE
          :EndIf
          :If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
              parms.errorFolder←(⊃⎕CMD'ECHO %LOCALAPPDATA%'),'/',buff,'\Errors'
          :Else
              parms.errorFolder←##.FilesAndDirs.PWD,'/Errors'
          :EndIf
      :EndIf
      parms.errorFolder←{(-(¯1↑⍵)∊'/\')↓⍵}##.FilesAndDirs.NormalizePath parms.errorFolder
      :If 0=+/'/\'∊parms.errorFolder
          parms.errorFolder←##.FilesAndDirs.NormalizePath ##.FilesAndDirs.PWD,'/',parms.errorFolder
      :EndIf
      :If 0=⎕NEXISTS parms.errorFolder
      :AndIf parms.checkErrorFolder
          :If 'Win'≡##.APLTreeUtils2.GetOperatingSystem ⍬
              ##.FilesAndDirs.MkDir parms.errorFolder
          :Else
              ⎕SH'mkdir -p "',parms.errorFolder,'"'
          :EndIf
      :EndIf
    ∇

:EndClass
