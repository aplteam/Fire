 (statusCode errMsg)←DeletePackage uri;uri_;packageID;statusCode;errMsg;request;response;en;msg;rc
⍝ Deletes a package.\\
⍝ Whether deleting a package is possible depends on the "delete" policy operated by the server in question.\\
⍝ On the server side it is determined by the INI setting [CONFIG]DeletePackages.
 statusCode←200 ⋄ errMsg←''
 uri_←F.EnforceSlash ReplaceRegistryAlias uri
 'No URI provided'Assert 0<≢uri_
 (uri_ packageID)←Reg.SeparateUriAndPackageID uri_
 :If 'file://'{⍺≢(≢⍺)↑⍵}uri_
     'Unknown Registry'Assert(⊂EnforceTrailingSlash uri_)∊MyUserSettings.registries.uri
 :EndIf
 :If Reg.IsHTTP uri_
     request←R.NewRequest 0
     request.RequestTarget←{'/'=1⍴⍵:⍵ ⋄ '/',⍵}packageID
     request.Method←'DELETE'
     request.Headers,←⊂'api-key'((MyUserSettings.GetRegistry uri).api_key)
     response←uri_ SendAndReceive request
     :If response.StatusCode≢200
         statusCode←response.StatusCode
         :If 405≡statusCode
             :If 0<≢response.Content
                 errMsg←'Server: ',response.Content
             :ElseIf ∨/'http://'⍷uri_
                 errMsg←'http:// is not supported'
             :Else
                 errMsg←'https:// is not supported'
             :EndIf
         :Else
             :If 0<≢response.Content
                 errMsg←'Server: ',response.Content
             :Else
                 errMsg←'Failed with status code ',⍕response.StatusCode
             :EndIf
         :EndIf
     :EndIf
 :Else
     uri_←'file://'{⍵↓⍨(≢⍺)×⍺≡(≢⍺)↑⍵}uri_
     :If F.IsDir uri_,packageID
         'Is not a package'Assert F.IsFile uri_,packageID,'/apl-package.json'
         (rc en msg)←F.RmDir uri_,packageID
         :If 0≠rc
             statusCode←400
             errMsg←'Remove operation failed, RC=',(⍕rc),'; ',msg
         :EndIf
     :Else
         statusCode←400
         errMsg←'Not found'
     :EndIf
 :EndIf
⍝Done
