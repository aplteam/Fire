 zipFilename←Pack(projectPath targetPath);cfg;fileList;zipObj;tempFilename;deps;errMsg
 ⍝ projectPath → folder to create package from\\
 ⍝ targetPath  → folder to put package in\\
 ⍝ ←             path to package file created
 (projectPath targetPath)←RemoveFileProtocol¨projectPath targetPath
 :If 0=≢projectPath
     projectPath←F.PWD,'/'
 :EndIf
 projectPath←⊃1 ⎕NPARTS projectPath,'/'
 :If 0=≢targetPath
     targetPath←F.PWD,'/'
 :EndIf
 :If ~(1↑targetPath)∊'./\'
 :AndIf (1↑1↓targetPath)≠':'
     targetPath←Reg.AddSlash targetPath
 :Else
     targetPath←⊃1 ⎕NPARTS targetPath,'/'
 :EndIf
 cfg←ReadPackageConfigFile projectPath
 ValidateConfig cfg projectPath
 zipFilename←F.ExpandPath targetPath,(GetPackageFilenameFromCfg cfg),'.zip'
 :If 0=⎕NEXISTS targetPath
     'Create!'F.CheckPath targetPath
 :Else
     F.DeleteFile zipFilename
 :EndIf
 zipObj←⎕NEW DotNetZip(,⊂zipFilename)
 fileList←projectPath GetAllFiles cfg
 'No source code?!'Assert 0<≢fileList
 projectPath zipObj.Add fileList
 projectPath zipObj.Add CFG_Name
 :If 0<≢cfg.assets
     {projectPath zipObj.Add ⍵}¨','(≠⊆⊢)cfg.assets
 :EndIf
 :If F.Exists projectPath,Dependencies.DEP_NAME
     tempFilename←F.GetTempFilename2''
     F.DeleteFile tempFilename
     F.MkDir tempFilename
     tempFilename,←'/',Dependencies.DEP_NAME
     tempFilename ⎕NCOPY⍠('IfExists' 'Replace')⊣projectPath,Dependencies.DEP_NAME
     deps←1⊃F.NGET tempFilename 1
     :If 0<≢errMsg←CheckDependencies deps
         F.RmDir 1⊃⎕NPARTS tempFilename
         zipObj.Dispose
         F.DeleteFile zipFilename
         errMsg Assert 0
     :EndIf
     deps←ReplaceRegistryAlias deps
     (⊂deps)F.NPUT tempFilename 1
     (⊃⎕NPARTS tempFilename)zipObj.Add Dependencies.DEP_NAME
     ⎕DL 0.2
     F.RmDir 1⊃⎕NPARTS tempFilename
 :EndIf
 zipObj.Dispose
⍝Done
