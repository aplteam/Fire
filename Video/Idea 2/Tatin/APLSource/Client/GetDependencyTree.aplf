 tree←{append}GetDependencyTree x;initialCall;identifier;principal;requiredBy;buildList;path;tempPath;filename;flag1;flag2;packageID;alias
⍝ Takes `identifier` (`x`) and returns the dependencies as a matrix.
⍝ `identifier` must be one of:
⍝ * an HTTP request
⍝ * a folder holding a package (like file://C:\Temp\{group-name-major.minor.patch})
⍝ * a path to a package in a registry (like C:\MyReg\{packageID})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ Returns a dependency tree as a matrix:
⍝ * [;1] Flag that indicates whether it is a principal package (1) or a dependency (0)
⍝ * [;2] PackageID of what required that dependency
⍝ * [;3] Full package ID
⍝ * [;4] The full URL (either a local path (without protocol) or http(s)://...)\\
⍝ This function requires the version number to be fully specified.\\
 append←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'append'
 :If initialCall←80=⎕DR x
     principal←1
     identifier←x
     ⎕SHADOW'∆TREE' ⍝ Semiglobal: ∆TREE is visible by GetDependencyTree when called recursively but not outside
     ∆TREE←CreateTree ⎕NS''
 :Else
     (principal identifier)←x
 :EndIf
 identifier←ReplaceRegistryAlias identifier
 :If Reg.IsHTTP identifier
     (alias identifier)←SplitAtAlias identifier
     path←{⍵↓⍨⍵⍳'/'}RemoveHttpProtocol identifier
     ∆TREE.Data⍪←principal(alias,path)(RemovePackageID identifier)
     principal GetDependencyTreeViaHTTP identifier
 :Else
     (alias identifier)←SplitAtAlias identifier
     :If F.IsDir identifier
         packageID←'/\'{⊃¯1↑⍵⊆⍨~⍵∊⍺}identifier
         :If ~Reg.IsValidPackageID_Complete packageID
             packageID←''
         :EndIf
     :Else
         packageID←GetPackageIDFromFilename identifier
         flag1←Reg.IsValidPackageID_Complete packageID
         flag2←Reg.IsValidPackageID_WithoutVersionNo packageID
         'Not a valid package ID'Assert flag1∨flag2
     :EndIf
     PrintToSession'  Dependency ',identifier,' identified...'
     ∆TREE.Data⍪←principal(alias,packageID)identifier
     :If '.zip'≡⎕C ¯4↑identifier
         filename←RemoveFileProtocol identifier
         tempPath←Reg.GetTempDir,'/',packageID
         F.RmDir tempPath
         ⎕DL 0.1
         F.MkDir tempPath
         ⎕DL 0.1
         filename DotNetZip.UnzipTo tempPath
         0 GetDependencyTreeFromRegistry tempPath
         F.RmDir tempPath
     :Else
         identifier←RemoveFileProtocol identifier
         0 GetDependencyTreeFromRegistry alias,identifier
     :EndIf
 :EndIf
 :If initialCall
     :If append
     :AndIf 0<≢buildList←LoadBuildList identifier
     :AndIf 0<≢buildList←(0<≢¨buildList[;∆TREE.∆packageID])⌿buildList
         ∆TREE.Data⍪←(~buildList[;∆TREE.∆packageID]∊∆TREE.{Data[;∆packageID]}⍬)⌿buildList
     :EndIf
     tree←Prune ∆TREE
 :Else
     tree←0 4⍴⍬
 :EndIf
⍝Done
