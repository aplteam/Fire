 (statusCode errMsg r)←{noBetas}GetBestVersionNumber(packageID url);request;res;f
 statusCode←200 ⋄ errMsg←'' ⋄ r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
 :If f←Reg.IsValidPackageID_Complete packageID
 :OrIf f←Reg.IsValidPackageID_WithMajorNo packageID
 :OrIf f←Reg.IsValidPackageID_WithoutPatchNo packageID
 :OrIf f←Reg.IsValidPackageID_WithoutVersionNo packageID
 :OrIf f←Reg.IsValidPackageName packageID
 :EndIf
 'Invalid package ID'Assert f
 :If Reg.IsHTTP url
     request←R.NewRequest 0
     request.RequestTarget←Reg.VersionOf_REST,'/packages/best_version/',packageID
     request.Headers,←⊂'Accept' 'application/json'
     request.Headers,←⊂'include-betas'('NY'[1+~noBetas])
     res←url SendAndReceive request
     :If 200≠res.StatusCode
         statusCode←res.StatusCode
         errMsg←res.Content
     :Else
         r←(Reg.AddSlash url),(Reg.APLfromJSON res.Content).BestVersion
     :EndIf
 :Else
     :If 0=≢r←noBetas Reg.GetBestVersionNumber(Reg.AddSlash url),packageID
         statusCode←404
     :EndIf
 :EndIf
