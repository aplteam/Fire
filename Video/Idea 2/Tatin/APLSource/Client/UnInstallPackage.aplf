 (list msg)←UnInstallPackage(folder packageID);pkgDepFilename;toBeRemoved;rc;bool;principalPkgs;buildList_old;packages;packageID_2;buildList_old;b;buildList_new;installedPkgs;newPrincipalPkgs
⍝ If `folder` carries a dependency file then this function attempts to un-install the package
⍝ `packageID` and all its dependencies but only in case those are neither top-level packages nor
⍝ required by other packages.\\
⍝ A package that has an alias must be uninstalled with the alias.\\
⍝ Note that if `packageID` is empty a clean-up attempt is made.\\
⍝ To keep things simple Tatin performs the following steps:
⍝  1. Checks whether the package is mentioned in the dependency file. If not an error is thrown.
⍝  3. Removes `packagedID` from the dependency file.
⍝  4. Re-compiles the build list based on the new dependency file.
⍝  5. Removes all packages that are not mentioned in the build list anymore\\
⍝ Returns a two-item vector:
⍝ 1. List with the fully qualified names of all removed packages. Note that might carry an alias
⍝ 2. Message, ideally empty.\\
⍝ Note that removing the directories hosting the packages might fail for all sorts of reasons even
⍝ though the package and any dependencies were already successfully removed from both the dependency
⍝ file and the build list.
 list←msg←''
 '"folder" is invalid'Assert F.IsDir folder
 folder←Reg.AddSlash folder
 pkgDepFilename←folder,Reg.DependenciesFilename
 'The folder has no dependency file'Assert F.IsFile pkgDepFilename
 principalPkgs←(1⊃F.NGET pkgDepFilename 1)~⊂''
 (Reg.DependenciesFilename,' is empty')Assert 0<≢principalPkgs
 :If 0<≢packageID
 :AndIf '@'∨.=packageID[1,≢packageID]
     packageID_2←IdentifyInstalledPackageID principalPkgs packageID
     :If 0=≢packageID_2
         msg←'Package is not installed'
         :Return
     :EndIf
 :Else
     packageID_2←packageID
 :EndIf
 buildList_old←LoadBuildList folder
 :If 0<≢packageID_2
     :If (⊂packageID_2)∊buildList_old[;2]
         :If ~(⊂packageID_2)∊principalPkgs
             msg←'Cannot uninstall: is not a principal package'
             :Return
         :ElseIf 1=≢principalPkgs
             msg←'The very last principal package cannot be uninstalled'
             :Return
         :EndIf
         newPrincipalPkgs←principalPkgs~⊂packageID_2
         (⊂newPrincipalPkgs)F.NPUT pkgDepFilename 1
     :Else
         newPrincipalPkgs←principalPkgs
     :EndIf
 :EndIf
 buildList_new←1 CompileBuildList folder
 :If (⊂packageID_2)∊RemoveAlias¨buildList_new[;2]
 :AndIf ~(⊂packageID_2)∊buildList_new[;2]
     msg←'Cannot uninstall: package has an alias assigned'
 :Else
     :If 0<≢packageID_2
     :AndIf ~(⊂RemoveAlias packageID_2)∊RemoveAlias¨newPrincipalPkgs
         :If F.IsDir folder,RemoveAlias packageID_2
             F.RmDir folder,RemoveAlias packageID_2
             list←,⊂packageID_2
         :Else
             msg←'Package is not installed'
         :EndIf
     :EndIf
 :EndIf
 installedPkgs←(≢folder)↓¨F.ListDirs folder
 :If 0<≢toBeRemoved←installedPkgs~RemoveAlias¨buildList_new[;2],⊂packageID_2
     F.RmDir folder∘,¨RemoveAlias¨toBeRemoved
     list,←toBeRemoved~list
 :EndIf
⍝Done
