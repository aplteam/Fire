 list←{parms}ListPackages_ uri;client;request;res;host;packageID
⍝ Returns a matrix with two columns.
⍝ Empty in case of a 404 returned by the server
 :If 0=⎕NC'parms'
     parms←⎕NS''
     parms.(group tags)←⊂''
     parms.aggregate←1
     parms.date←0
     parms.info_url←0
 :EndIf
 (host packageID)←Reg.SeparateUriAndPackageID uri
 'Not a valid URI'Assert('/'+.=host)∊2 3
 packageID←{0=≢⍵:'*' ⋄ ⍵}packageID
 request←R.NewRequest 0
 request.RequestTarget←Reg.VersionOf_REST,'/packages/',{⍵↓⍨'/'=1⍴⍵}packageID
 request.RequestTarget,←'?'
 :If 0<≢⊃,/parms.group
     request.RequestTarget,←'group=',parms.group,'&'
 :EndIf
 :If 0<≢⊃,/parms.tags
     request.RequestTarget,←'tags=',parms.tags,'&'
 :EndIf
 :If parms.date
     request.RequestTarget,←'date=1&'
 :Else
     request.RequestTarget,←'aggregate=',(⍕parms.aggregate),'&'
 :EndIf
 :If parms.info_url
     request.RequestTarget,←'info_url=1&'
 :EndIf
 request.RequestTarget←(-'&'=¯1↑request.RequestTarget)↓request.RequestTarget
 request.Headers,←⊂'Accept' 'application/json'
 res←host SendAndReceive request
 :If 404≡res.StatusCode
     list←0 2⍴''⍬
 :ElseIf 200≠res.StatusCode
     :If 0<≢res.Content
         ('Server: ',res.Content)Assert 0
     :Else
         ('Failed with status code ',⍕res.StatusCode)Assert 0
     :EndIf
 :Else
     :Trap 11
         list←Reg.APLfromJSON res.Content
     :Else
         'Server failed to return (valid) JSON5'Assert 0
     :EndTrap
 :EndIf
⍝Done
