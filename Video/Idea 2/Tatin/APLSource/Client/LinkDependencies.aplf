 {r}←LinkDependencies refs;ref;deps;root;destinations;bool;depName;destination;cfgs;cfg;list;dep;aliasOrName
⍝ Takes a list of refs, typically returned by `LoadDependencies`, and establishes any required references
⍝ to dependencies within those refs.
⍝ `api` rules, but if it's empty then `name` is taken instead.
 r←⍬
 root←{GetTatinRootSpace 1⊃⍵}⍣(0<≢refs)⊣refs
 :If 0<≢refs
     PrintToSession'  Establish references to dependencies...'
     :For ref :In refs
         ref←CheckWsPaths ref
         :If 0<≢deps←ref.code.TatinVars.DEPENDENCIES
             deps←ReplaceRegistryAlias¨deps
             destinations←GetPackageIDFromFilename¨deps
             destinations←2⊃¨SplitAtAlias¨destinations
             destinations←(⊂root,'.'),¨Reg.EnforceAPL_Name¨destinations
             destinations←CheckWsPaths¨destinations
             cfgs←Reg.JSON¨destinations⍎¨⊂'code.TatinVars.CONFIG'
             :For cfg destination dep :InEach cfgs destinations deps
                 depName←{⍵↑⍨¯1+⍵⍳'-'}{⍵↓⍨⍵⍳'-'}GetPackageIDFromFilename dep
                 aliasOrName←depName{'@'∊⍵:⍵↑⍨¯1+⍵⍳'@' ⋄ ⍺}dep
                 :If 0=≢cfg.api
                     :If 1≠≢list←(' '~¨⍨↓⍎destination,'.code.⎕NL 9')~⊂'TatinVars'
                         aliasOrName ref.{⍎'⎕THIS.code.',⍺,'←',⍵}destination,'.code'
                     :Else
                         aliasOrName ref.{⍎'⎕THIS.code.',⍺,'←',⍵}destination,'.code.',1⊃list
                     :EndIf
                 :Else
                     aliasOrName ref.{⍎'⎕THIS.code.',⍺,'←',⍵}destination,'.code.',cfg.api
                 :EndIf
             :EndFor
         :EndIf
     :EndFor
 :EndIf
⍝Done
