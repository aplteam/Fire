:Class ConnectionParameters
⍝ Create an instance with all the properties required for a connection to an SMTP server.
⍝ Pass an instance of this class as argument to `⎕NEW Connection`.

    ∇ make
      :Implements Constructor
      :Access Public
      _Server←''                    ⍝ server address
      _Password←''                  ⍝ optional password (if server requires authentication)
      _Userid←''                    ⍝ userid for authentication (defaults to `From`)
      _Secure←1                     ⍝ 1=SSL/TLS, 0 = not secure
      _Port←465                     ⍝ server port (465 for secure, 578 otherwise)
      _Domain←''                    ⍝ fully qualified domain name for logging on with `Userid` and `Password`
      _Org←''                       ⍝ optional organization
      _ReplyTo←''                   ⍝ optional reply to email address
      _XMailer←'APLTeam SMTP Client ',2⊃(⊃⊃⎕class ⎕this).##.Version  ⍝ client identifier
      _TLSFlags←32                  ⍝ Default: accept server certificate without validating (see Conga User Guide Appendix C)
    ∇

    :Property Server
    ⍝ URL of an SMTP server, for example smtp.gmail.com'
    :Access public Instance
        ∇ r←get
          r←_Server
        ∇
        ∇ set arg
          'Server: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _Server←arg.NewValue
        ∇
    :EndProperty

    :Property Password
    ⍝ Used in connection with `Userid` to log onto `Server`
    :Access public Instance
        ∇ r←get
          r←_Password
        ∇
        ∇ set arg;val
          'Password: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _Password←arg.NewValue
        ∇
    :EndProperty

    :Property Userid
    ⍝ Simple character vector that is going to be the subject line of the email
    :Access public Instance
        ∇ r←get
          r←_Userid
        ∇
        ∇ set arg
          'Userid: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _Userid←arg.NewValue
        ∇
    :EndProperty

    :Property Secure
    ⍝ Boolean that decides whether communication is secured or not
    :Access public Instance
        ∇ r←get
          r←_Secure
        ∇
        ∇ set arg
          'Secure: not a Boolean'Assert(⊂arg.NewValue)∊0 1
          _Secure←arg.NewValue
        ∇
    :EndProperty

    :Property Port
    ⍝ Integer between 1 and 65535
    :Access public Instance
        ∇ r←get
          r←_Port
        ∇
        ∇ set arg
          'Port: not an integer between 1 and 65535'Assert(⎕DR arg.NewValue)∊83 163 323
          'Port: not an integer between 1 and 65535'Assert arg.NewValue∊⍳65535
          _Port←arg.NewValue
        ∇
    :EndProperty

    :Property Domain
    ⍝ URL of the SMTP server
    :Access public Instance
        ∇ r←get
          :If 0=≢_Domain
              _Domain←{⍵↓⍨⍵⍳'@'}_Userid
          :EndIf
          r←_Domain
        ∇
        ∇ set arg
          'Domain: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _Domain←arg.NewValue
        ∇
    :EndProperty

    :Property Org
    ⍝ Optionally: organisation
    :Access public Instance
        ∇ r←get
          r←_Org
        ∇
        ∇ set arg
          'Org: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _Org←arg.NewValue
        ∇
    :EndProperty

    :Property ReplyTo
    ⍝ Optional email address
    :Access public Instance
        ∇ r←get
          r←_ReplyTo
        ∇
        ∇ set arg
          'ReplyTo: not a simple character vector'Assert 80=⎕DR arg.NewValue
          :If 0<≢arg.NewValue
              'ReplyTo: does not carry an @'Assert'@'∊arg.NewValue
              'ReplyTo: not a valid email address'Assert 5<≢arg.NewValue
          :EndIf
          _ReplyTo←arg.NewValue
        ∇
    :EndProperty

    :Property XMailer
    ⍝ Client identifier
    :Access public Instance
        ∇ r←get
          r←_XMailer
        ∇
        ∇ set arg
          'XMailer: not a simple character vector'Assert 80=⎕DR arg.NewValue
          _XMailer←arg.NewValue
        ∇
    :EndProperty

    :Property TLSFlags
    ⍝
    :Access public Instance
        ∇ r←get
          r←_TLSFlags
        ∇
        ∇ set arg
          'TLSFlags: invalid data type'Assert(⎕DR arg.NewValue)∊83 163
          'TLSFlags: not a single integer in 1,2*⍳7 'Assert 1=≢arg.NewValue
          'TLSFlags: not a single integer in 1,2*⍳7'Assert(⊂arg.NewValue)∊1,2*⍳7
          _TLSFlags←⊃arg.NewValue
        ∇
    :EndProperty

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

    ∇ msg←PerformChecks dummy
    ⍝ Call this in order to check the parameters for completeness and consistency.
    ⍝ Checks all settings. If `msg` is empty then everything is OK.
      :Access Public Instance
      msg←''
      :If 0=≢Domain
          msg,←⊂'"Domain"'
      :EndIf
      :If 0=≢_Server
          msg,←⊂'"Server"'
      :EndIf
      :If 0=≢_Port
          msg,←⊂'"Port"'
      :EndIf
      :If _Secure
          :If 0=≢_Password
              msg,←⊂'"Password"'
          :EndIf
          :If 0=≢_Userid
              msg,←⊂'"Userid"'
          :EndIf
      :EndIf
      :If 0<≢msg
          msg←'Missing: ',⊃{⍺,',',⍵}/msg
      :EndIf
    ∇

:EndClass
