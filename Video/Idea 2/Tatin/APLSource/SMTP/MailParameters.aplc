:Class MailParameters
⍝ Create an instance with all the properties required for sending an email.
⍝ Pass an instance of this class to the `Send` method of an instance of the `Connection` class.

    ∇ make
      :Implements Constructor
      :Access Public
      _To←''
      _CC←''
      _BCC←''
      _From←''
      _Subject←''
      _Body←''
      _Attachments←''
    ∇

    :Property To
    ⍝ Exactly one email address
    :Access public Instance
        ∇ r←get
          r←_To
        ∇
        ∇ set arg
          'To: not a simple character vector'Assert 80=⎕DR arg.NewValue
          'To: does not contain an @ symbol'Assert'@'∊arg.NewValue
          'To: invalid email address'Assert 5<≢arg.NewValue
          'To: you must not specify more than one email address'Assert~','∊arg.NewValue
          _To←arg.NewValue
        ∇
    :EndProperty

    :Property CC
    ⍝ Zero to many comma-separated email addresses as a simple character vector
    :Access public Instance
        ∇ r←get
          r←_CC
        ∇
        ∇ set arg;val
          val←','(≠⊆⊢)arg.NewValue
          'CC: not a simple character vector'Assert∧/{80=⎕DR ⍵}¨val
          'CC: invalid email address'Assert 5∧.<≢¨val
          'CC: invalid email address; no ampersand found'Assert∧/'@'∊¨val
          _CC←val
        ∇
    :EndProperty

    :Property BCC
    ⍝ Zero to many comma-separated email addresses as a simple character vector
    :Access public Instance
        ∇ r←get
          r←_BCC
        ∇
        ∇ set arg;val
          val←','(≠⊆⊢)arg.NewValue
          'BCC: not a simple character vector'Assert∧/{80=⎕DR ⍵}¨val
          'BCC: invalid email address'Assert 5∧.<≢¨val
          'BCC: no ampersand found'Assert∧/'@'∊¨val
          _BCC←val
        ∇
    :EndProperty

    :Property From
    ⍝ Something like <john Doe) john.doe@wherever.com or just an email address.
    ⍝ If this is left empty it falls back to `Userid` of the connection instance.
    ⍝ This is a good idea in most scenarios these days because otherwise you mail 
    ⍝ is very likely to end up in the Spam folder.
    :Access public Instance
        ∇ r←get
          r←_From
        ∇
        ∇ set arg
          'From: not a simple character vector'Assert 80=⎕DR arg.NewValue
          'From: invalid email address'Assert 5<≢arg.NewValue
          'From: no ampersand found'Assert'@'∊arg.NewValue
          _From←arg.NewValue
        ∇
    :EndProperty

    :Property Subject
    ⍝ Simple character vector that is going to be the subject line of the email
    :Access public Instance
        ∇ r←get
          r←_Subject
        ∇
        ∇ set arg
          'Subject: not a simple character vector'Assert (⎕DR arg.NewValue)∊80 160
          _Subject←arg.NewValue
        ∇
    :EndProperty

    :Property Body
    ⍝ Simple character vector that is going to be the subject line of the email
    :Access public Instance
        ∇ r←get
          r←_Body
        ∇
        ∇ set arg;val
          val←,⊆arg.NewValue
          'Body: neither a simple character vector nor a vector of character vectors'Assert∧/{(⎕DR ⍵)∊80 160}¨val
          _Body←val
        ∇
    :EndProperty

    :Property Attachments
    ⍝ Vector of instances of the `Attachment` class.
    :Access public Instance
        ∇ r←get
          r←_Attachments
        ∇
        ∇ set arg;val
          :If 0=≢arg.NewValue
              _Attachments←''
          :Else
              'Use the AddAttachment method'Assert 0
          :EndIf
        ∇
    :EndProperty

    ∇ {r}←AddAttachment y
    ⍝ Used to add attachments.
    ⍝ `y` may be one of:
    ⍝ * An instance of the `Attachment` class
    ⍝ * A simple character vector interpreted as a filename
    ⍝ * A vector of two simple character vectors interpreted as filename and mime type
      :Access public instance
      :If 80=⎕DR y
          _Attachments,←⎕NEW(⊃⊃⎕CLASS ⎕THIS).##.Attachment(,⊂y)
      :ElseIf 2=≡y
      :AndIf 2=≢y
      :AndIf 80∧.=⎕DR¨y
          _Attachments,←⎕NEW(⊃⊃⎕CLASS ⎕THIS).##.Attachment y
      :ElseIf 1=≢y
      :AndIf (⊃⊃⎕CLASS ⎕THIS).##.Attachment≡⊃⊃⎕CLASS y
          _Attachments,←y
      :Else
          'Neither a filename nor a filename plus a mime type nor an instance of the "Attachment" class'Assert 0
      :EndIf
    ∇

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←1 ⋄ ⍺ ⎕SIGNAL 1↓(⊃∊⍵),11}

    ∇ msg←PerformChecks dummy
    ⍝ Call this in order to check the parameters for completeness and consistency.
    ⍝ Checks all settings. If `msg` is empty then everything is OK.
      :Access Public Instance
      msg←''
      :If 0=≢_To
          msg,←⊂'"To"'
      :EndIf
      :If 0=≢_Subject
          msg,←⊂'"Subject"'
      :EndIf
      :If 0=≢_Body
          msg,←⊂'"Body"'
      :EndIf
      :If 0<≢msg
          msg←'Missing: ',⊃{⍺,',',⍵}/msg
      :EndIf
    ∇

:EndClass
