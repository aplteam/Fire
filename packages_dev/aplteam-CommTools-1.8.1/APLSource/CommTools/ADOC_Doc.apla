(
 ''
 '## Overview'
 ''
 'This package comes with functions and operators that allow you to interrogate the user, and make her...'
 ''
 '* answer simple questions like "Are you sure?" or "Do you really want to delete this file?" (`YesOrNo`)'
 '* select an item (or several items) from a list of items, or quit (`Select`)'
 '* pause and read a message before continuing (`Pause`)'
 '* enter a character vector in response to something like "Enter your name:" (`AskForText`)'
 '* enter a number in response to something like "How many copies? " (`AskForNumber`)'
 '                                                                 '
 'This is useful for interacting with the user in the session, something that user commands do'
 'quite often.'
 ''
 'Note that although `AskForNumber` and `AskForText` are operators rather than functions, this document'
 'will refer to them as functions except when they themselves are discussed.'
 ''
 '## Interrupting the functions'
 ''
 'When a user is prompted for input, due to a long-standing bug in Dyalog you cannot interrupt with a weak '
 'or a strong interrupt. Answering the question or selecting an item and then trying to interrupt the '
 'code does not work well on modern machines because they are just too fast.'
 ''
 'That''s why all functions allow you to enter `∘∘∘`, which makes the functions run on a stop vector that '
 'is dynamically set for just this purpose.                                                                 '
 ''
 '## Automated responses'
 ''
 'Test cases quite often require certain decisions and choices to be made. In such cases the presence '
 'of a human in front of the screen is required. The automation feature is designed to allow such tests '
 'to run without a human.'
 ''
 'All functions can be integrated into tests so that no user is required to answer any questions or'
 'select items. This is achieved by providing data on global variables that do not normally exist.'
 ''
 '#### Dynamically generated questions and captions'
 '    '
 'Sometimes you need to create a question (`YesOrNo`) or a caption (`Select`) dynamically such as '
 '"Select action for file /foo/boo/this-will-change.txt"'
 ''
 'In such cases, for automation, just specify only the leading part of the question or caption which won''t be '
 'generated dynamically. In the example just specify "Select action for file". If a complete match cannot '
 'be found, `Select` or `YesAndNo` will check if the _beginning_ of the caption/question matches '
 'the given text, so it would still find a match.'
 ''
 'However, you may find it more convenient to use aliases.'
 ''
 '### Using aliases'
 ''
 'Aliases were introduced in version 1.2. '
 ''
 'By default, an alias is defined by text up to the (first) `@` character when the text must not contain a'
 'space, a Line Feed (LF) character and a Carriage Return (CR) character. It may contain just alphabetic'
 'characters, digits and the characters "-_∆". '
 ''
 'As of version 1.3.0 you can define a different alias characters by assigning it to the global variable '
 '`AliasChar`. The only reason for doing this is when you need to have the `@` glyph in a question or caption. '
 'Even then, more often than not, you don''t need to worry about this because aliases can only be defined until'
 'the first space character or the first LF or CR character.'
 ''
 'Anything up to and including the `@` will be taken as alias as long as it does not contain LF, CR or a '
 'space, meaning that this part will not be displayed as a question or message, but can be used as a matching '
 'string, again including the (trailing) `AliasChar` character. '
 ''
 'For example:'
 ''
 '```'
 'CommToos.YesOrNor ''MyAlias@My Question'' '
 '```'
 ''
 'This defines an alias. This on the other hand doesn''t:'
 ''
 '```'
 'CommToos.YesOrNor ''The @ character is used...'''
 '```'
 ''
 'Note that while aliases may seem like a perfect solution, they can also reduce readability. If you create a '
 'number of responses in advance at the start of your application/user command this can become a bit confusing.'
 ''
 'There are two ways to avoid this:'
 ''
 '1. Use a meaningful expression as an alias rather than, for example, just `1@`.'
 ''
 '2. When assigning to one of the global variables you can add something _after_ the `@` glyph: this will be '
 '   ignored and can therefore be used to comment on the entry.'
 ''
 '   It could be a hint or define the context in which the question will be asked.'
 '   '
 '### Cleaning up'
 ''
 'Of course there is nothing wrong with deleting the global variables yourself like this:'
 ''
 '```'
 '⎕EX ''CommTools.Select_Choices'''
 '```'
 ''
 'However, you can also just call the function `CommTools.Cleanup` which will do the job for you.'
 ''
 'This has some advantages:'
 ''
 '* If `CommTools` is extended in the future, `Cleanup` might do more than that, so calling it is safer than trying '
 '  to do the job yourself. '
 '* You don''t need to know the names of the global variables, and therefore you can''t get them wrong either  '
 ''
 'The downside of `Cleanup` is that it deletes _all_ global variables used for automation, and there '
 'may be scenarios where you do not want this. Then you have to delete yourself what you don''t need anymore.'
 '   '
 '## The functions and operators'
 ''
 ''
 '### The function "YesOrNo"'
 ''
 'Imagine asking this question:'
 '                       '
 '```'
 'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
 '```'
 ''
 'To answer this question automatically create a global variable `YesOrNo_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question to be answered automatically.'
 '| `[;2]` | The answer to be given, usually either "y" or "n".'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.YesOrNo_Answers←1 2⍴''Are you sure you want to delete this file?'' ''y'''
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 'CommTools.YesOrNo ''Are you sure you want to delete this file?'''
 '```'
 ''
 '`YesOrNo` would do the following:'
 ''
 '1. Check if there is a global variable `YesOrNo_Answers` around.'
 '2. If there is, it would try to match the question to any row in the first column of `YesOrNo_Answers` '
 '3. If there is a match, it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed'
 '* If multiple entries in `YesOrNo_Answers` match the question an error is thrown'
 '* If the second column is empty, `YesOrNo` would return the default answer given by the left argument: '
 '  '
 '  1="Y", 0="N"'
 '  '
 '  If there is no left argument provided in such a case `YesOrNo` would throw an error'
 '* If no row in `YesOrNo_Answers` matches the question it would ask the question as usual'
 ''
 '#### Dynamic questions'
 '    '
 'Sometimes you need to ask dynamically created questions like "Are you sure you want to delete the file /foo/boo/this-will-change.txt?"'
 ''
 'In this case just specify "Are you sure you want to delete the file" as the text to match: if there is no complete match, `YesOrNo` '
 'will start searching for questions that _begin_ with the given text, so it will still find a match. '
 ''
 '#### Multiple line questions                    '
 ''
 '`YesNorNo` accepts nested vectors as questions as well as a character vector with `⎕UCS 10` in it. (Note that a nested vector'
 'is internally converted to a simple character vector with `⎕UCS 10` (Line Feed) in it)'
 ''
 'If the two searches outlined above do not produce a match `YesNorNo` would isolate the last bit of the question '
 'and check it for a complete match.'
 ''
 'This is best explained with an example:'
 ''
 '```'
 '     q←⊂''file1'''
 '     q,←⊂''file1'''
 '     q,←⊂''Sure you wanna delete these?'''
 '     CommTools.YesOrNo_Answers←1 2⍴ (3⊃q) ''y'''
 '     ⎕←CommTools.YesOrNo q'
 ('y'⋄)
 '```'
 ''
 '### The "Select" function '
 ''
 'Imagine you want to present a list with three items, and you want the second one to be selected.'
 ''
 'This can be achieved by creating a global variable `Select_Choices` as a matrix with two columns:'
 ''
 '| `[;1]` | The caption of the list, or at least the beginning of the caption'
 '| `[;2]` | The answer to be given, so usually either an integer pointing to the item selected,<br>or an "a" (for "all") or a "q" (for quit).'
 ''
 ''
 '`Select` would do the following:'
 ''
 '1. Check whether there is a global variable `Select_Choices` around'
 '2. If so it would try to match the caption to any row in the first column of `Select_Choices` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in choices are removed'
 '* If multiple entries in `Select_Choices[;1]` match the caption an error is thrown'
 '* If no row in `Select_Choices` matches the caption it would present the list for selection to the user  '
 ''
 'So in our case we specify:'
 ''
 '```'
 '   l←⊂''First'''
 '   l,←⊂''Second'''
 '   l,←⊂''Third'''
 '   caption←''Please select hot item:'''
 '   CommTools.Select_Choices←1 2⍴caption 2'
 '   ⎕←caption CommTools.Select l  '
 ('2'⋄)
 '``` '
 ''
 'For all items:'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''a'''
 '   ⎕←caption CommTools.Select l  '
 '1 2 3'
 '``` '
 ''
 'For no items ("quit"):'
 ''
 '```   '
 '   CommTools.Select_Choices←1 2⍴caption ''q'''
 '   ⎕←⍬≡caption CommTools.Select l  '
 ('1'⋄)
 '```                   '
 ''
 '#### Specifying a selection'
 '                       '
 'If you need a specific selection to be returned but you don''t know the item number in advance because the list is created '
 'dynamically, you can specify the selection itself instead of an integer.'
 ''
 'For example:'
 ''
 '```'
 '   CommTools.Select_Choices←1 2⍴''My caption'' ''Second'''
 '   ⎕←''My caption'' CommTools.Select l'
 '2     '
 '```'
 ''
 '#### The wildcard character *'
 ''
 'In case the list of items is created dynamically it might be difficult or even impossible to construct a matching line.'
 ''
 'In such a case use the `*` glyph as a wildcard character: it tells `Select` to match either only the beginning of each line'
 'or only the end of a line. That works because the `*` character must be either the first or the last character; anywhere else'
 'it would be ignored.'
 ''
 'Examples:'
 ''
 'I. At the beginning    '
 ''
 '```'
 '   list←''First item'' ''Second item'' ''Third item'''
 '   CommTools.Select_Choices←1 2⍴''My caption'' ''Second*'''
 '   ''My caption'' CommTools.Select list'
 '```'
 ''
 'I. At the end    '
 ''
 '```'
 '   list←''/path2/file_1'' ''/path2/file_2'' ''/path2/file_3'''
 '   CommTools.Select_Choices←1 2⍴''My caption'' ''*_3'''
 '   ''My caption'' CommTools.Select list'
 '```'
 ''
 '### The "Pause" function '
 ''
 'The purpose of this function is to print a message to `⎕SE`, possibly with line feed characters (`⎕UCS 10`) in them, '
 'and tell the user to press <enter> to continue.'
 ''
 'As with the other functions you can interrupt `Pause` by typing `∘∘∘`.'
 ''
 'If you don''t want the function to pause at all, create a global variable `NoPause` and assign a 1 to it.'
 ''
 'If you want to pause in some but not all instances you can assign one or more `msg` to `NoPause`. '
 'The function will try to match the string(s) on `NoPause` with the message, and if it''s a full or partial match it won''t pause, otherwise it will.'
 ''
 '### Ask for a number'
 ''
 'Imagine you ask this question:'
 '                       '
 '```'
 '({1}CommTools.AskForNumber) ''Number of copies to print'''
 '```'
 ''
 'Note that the operator `AskForNumber` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   ⍵∊1 2 3 4 5:1 '
 '   ⎕←''Please enter a number between 1 and 5'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForNumber) ''Number of copies to print:'''
 '```     '
 ''
 'If the user does not enter a number but just presses <enter>, an empty vector is returned. You can force the user to enter'
 'a number by passing a 1 as left argument (`enforce`).'
 ''
 'To answer this question automatically create a global variable `AskForNumber_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question.'
 '| `[;2]` | The answer to be given, either as a character vector or as a number.'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.AskForNumber_Answers←1 2⍴''Number of copies to print'' 1'
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 '({1}CommTools.AskForNumber) ''Number of copies to print'''
 '```'
 ''
 '`AskForNumber` would do the following:'
 ''
 '1. Check whether there is a global variable `AskForNumber_Answers` around'
 '2. If there is it would try to match the question to any row in the first column of `AskForNumber_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row and convert it to a number'
 '   if it is text'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed, ": " is appended'
 '* If multiple entries in `AskForNumber_Answers` match the question, an error will be thrown'
 '* If no row in `AskForNumber_Answers` matches the question, the question is asked as usual'
 ''
 '### Asking for a character vector'
 ''
 'Imagine you are asking this question:'
 '                       '
 '```'
 '({1}CommTools.AskForText) ''Enter a month (three characters)'''
 '```'
 ''
 'Note that the operator `AskForText` requires a check function to be passed as left operand. In the example '
 'the check function simply returns a 1. Instead you could perform a real check like this:'
 ''
 '```'
 'CheckFn←{'
 '   (⊂⍵)∊↓12 3⍴''janfebmaraprmaijunjulaugsepoctnovdec'':1 '
 '   ⎕←''Please enter just three lowercase characters'' '
 '   0'
 ('}'⋄)
 '(CheckFn CommTools.AskForText) ''Enter a month (just three character)'''
 '```     '
 ''
 'If the user does not enter anything but just hits <enter> an empty vector will be returned. '
 'You can force the user to enter a number by passing a 1 as left argument (`enforce`).'
 ''
 'Instead of a Boolean you can also specify a character vector as `⍺`. In that case, when the user just presses `<enter>`'
 'without entering anything, the default (`⍺`) is returned.'
 ''
 'To answer this question automatically create a global variable `AskForText_Answers` as a matrix'
 'with two columns:'
 ''
 '| `[;1]` | Contains the question.'
 '| `[;2]` | The answer to be given.'
 ''
 'So in our case we specify:'
 ''
 '```'
 'CommTools.AskForText_Answers←1 2⍴''Enter a month (three character)'' ''mar'''
 '```         '
 ''
 'When the question is asked:'
 '                             '
 '```'
 '({1}CommTools.AskForText) ''Enter a month (three character)'''
 '```'
 ''
 '`AskForText` would do the following:'
 ''
 '1. Check whether there is a global variable `AskForText_Answers`'
 '2. If so it would try to match the question to any row in the first column of `AskForText_Answers` '
 '3. If there is a match it would return the value in the second column of the identified row'
 ''
 'Notes:'
 ''
 '* Leading spaces in the question are removed, ": " is appended'
 '* If multiple entries in `AskForText_Answers` match the question, an error will be thrown'
 '* If no row in `AskForText_Answers` matches the question, the question will be asked as usual'
)
