 {r}←{savePath}CreateAPI y;refTosourceNS;names;API_name;type;name;at;body;header;fullName;targetNamespace;Tref;filename;extension;flag;b
⍝ Deletes and then re-creates a namespace `API_Name` within `refTosourceNS` and then establishes cover functions
⍝ or references etc serving as API (public interface).\\
⍝ If you wish you may specify `API_name` as a fully qualified name which is useful mostly for test cases.
⍝ If you don't then it is assumed to live inside `refTosourceNS`.\\
⍝ `⍵` must be a vector of length 2 or 3:\\
⍝ [1] (mandatory) name of the source namespace\\
⍝ [2] (mandatory) list of all public names, typically returned by a function named "Public" or the like.\\
⍝ [3] (optional): the name of the target namespace; defaults to "API"\\
⍝ By default Link is told about the functions (but not refs) created;
⍝ instead you may specify a folder via `⍺` which must exist. If you do all functions are saved within that folder without involving Link.
⍝ If you don't want anything to be saved at all then specify `''` as `⍺`.\\
⍝ Returns the number of functions and refs established.\\
⍝ Handles niladic, monadic, dyadic and ambivalent functions as well as scripted namespaces, classes and
⍝ interfaces and variables but **not** operators.
 r←0
 (refTosourceNS names API_name)←3↑y,⊂'API'
 'Source namespace (1⊃⍵) is not a reference'Assert 0 1≡{(≡⍵)(≢⍵)}refTosourceNS
 'Source namespace (1⊃⍵) is not a namespace'Assert 0=+/'[]'∊refTosourceNS
 'Source namespace (1⊃⍵) is not a namespace'Assert 9.1≡⎕NC⊂⍕refTosourceNS
 savePath←{0<⎕NC ⍵:⍎⍵ ⋄ ¯1}'savePath'
 'No API names specified?!'Assert 0<≢names
 names←⊆names
 API_name←⍕{0<⎕NC ⍵:⍎⍵ ⋄ 'API'}'API_name'
 :If (⊃API_name)∊'#⎕'
     targetNamespace←API_name
 :Else
     targetNamespace←(⍕refTosourceNS),'.',API_name
 :EndIf
 :If 0<⎕NC targetNamespace
     :If 0<≢(⍎targetNamespace).⎕NL⍳16
         :Trap 0
             ⎕SE.Link.Expunge targetNamespace
             ⎕DL 0.5
         :Else
             ⎕SE.Link.Expunge targetNamespace
             ⎕DL 0.5
         :EndTrap
     :EndIf
 :EndIf
 Tref←⍎targetNamespace ⎕NS''
 :If ¯1≢savePath
 :AndIf 0<≢savePath
     'Create!'F.CheckPath savePath
 :EndIf
 :If ∨/b←0=refTosourceNS.⎕NC↑names
     0 Assert⍨'Not found in ',(⍕refTosourceNS),': ',⊃{⍺,', ',⍵}/b/names
 :EndIf
 :For name :In names
     name~←' '
     'Public names must not carry a "."'Assert~'.'∊name
     flag←1
     type←refTosourceNS.⎕NC⊂name
     :If 3=⌊type        ⍝ Function?
         r+←1
         at←refTosourceNS.⎕AT name
         header←1⊃refTosourceNS.⎕NR name
         :If 0=1 2⊃at   ⍝ Niladic functions need special treatment
             Tref.⎕FX header({(1⊃⍵),'←##.',(2⊃⍵)}'←'A.Split{⍵↑⍨¯1+⍵⍳'⍝'}header)
         :Else
             :If 2=|1 2⊃at
                 :If '{'=⊃A.DLB header
                     Tref.{⍎⍵,'←{⍺←⊢ ⋄ 1:shy←⍺ ##.',⍵,' ⍵}'}name
                 :Else
                     Tref.{⍎⍵,'←{⍺←⊢ ⋄ ⍺ ##.',⍵,' ⍵}'}name
                 :EndIf
             :Else
                 :If '{'=⊃A.DLB header
                     Tref.{⍎⍵,'←{1:shy←##.',⍵,' ⍵}'}name
                 :Else
                     Tref.{⍎⍵,'←{##.',⍵,' ⍵}'}name
                 :EndIf
             :EndIf
         :EndIf
     :ElseIf 4=⌊type     ⍝ Operator
         ⎕←'*** Ignored: operator ',name
         flag←0
     :ElseIf 2=⌊type     ⍝ Variable
         Tref.{⍎'⎕THIS.',⍵,'←##.',⍵}name
         r+←1
         extension←'apla'
     :ElseIf 9.1=type   ⍝ Namespace script?
         Tref.{⍎'⎕THIS.',⍵,'←##.',⍵}name
         r+←1
         extension←'apln'
     :ElseIf 9.4=type   ⍝ Class?
         Tref.{⍎'⎕THIS.',⍵,'←##.',⍵}name
         r+←1
         extension←'aplc'
     :ElseIf 9.5=type   ⍝ Interface?
         Tref.{⍎'⎕THIS.',⍵,'←##.',⍵}name
         r+←1
         extension←'apli'
     :Else
         ⎕←'*** Ignored: ',name,' (name class=',(⍕type),')'
         flag←0
     :EndIf
     :If flag
     :AndIf 3=⌊type
         :If ¯1≡savePath
             fullName←(⍕Tref),'.',name
             ⎕DL 0.05
             ⎕SE.Link.Add fullName
         :ElseIf 0<≢savePath
             extension←'aplf'
             filename←name,'.',extension
             body←Tref.⎕NR name
             (⊂body)⎕NPUT(savePath,'/',filename)1
         :Else
             ⍝ User does not want to save anything.
         :EndIf
     :EndIf
 :EndFor
⍝Done
