 yesOrNo←{default}YesOrNo question;isOkay;answer;add;dtb;answer2;bool;flag;buff;alias;firstPart;ind
⍝ Asks a simple question and allows just "Y" (or "y") or "N" (or "n") as answers.\\
⍝ The question may be a simple character vector, possibly with `⎕UCS 10` in between,
⍝ or a vector of simple character vectors.\\
⍝ You may specify a default via the optional left argument which when specified
⍝ rules what happens when the user just presses <enter>.
⍝ `default` must be either 1 (yes) or 0 (no).\\
⍝ By entering "`∘∘∘`" the user may interrupt `YesOrNo`: this activates a stop.\\
⍝ You can make `YesOrNo` answer the question automatically, refer to the documentation
⍝ with ]ADoc CommTools\\
⍝ Notes:
⍝ * This function does **not** work as intended when traced!
⍝ * In case `question` is a scalar question mark, `YesOrNo` returns the path to itself and
⍝   the name of the global variable that can be used for automation, separated by a dot.
 :If '?'≡question
     yesOrNo←(⍕⎕THIS),'.YesOrNo_Answers←0 2⍴'' '''
     :Return
 :EndIf
 isOkay←0
 default←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'default'
 isOkay←0
 :If ~(≡question)∊0 1
     question←1↓⊃,/LF,¨question
 :EndIf
 question←ReplaceCRbyLF question
 question←{⍵↓⍨+/∧\' '=⍵}question
 :If 0≠≢default
     'Left argument must be a scalar'⎕SIGNAL 11/⍨1≠≢default
 :AndIf ~default∊0 1
     'The left argument. if specified, must be a Boolean or empty'⎕SIGNAL 11
 :EndIf
 flag←1
 firstPart←{⍵↑⍨⍵⍳LF}question
 :If 0<⎕NC'YesOrNo_Answers'
     YesOrNo_Answers←(0<≢¨' '~⍨¨YesOrNo_Answers[;1])⌿YesOrNo_Answers
 :AndIf 0<≢YesOrNo_Answers
     :If AliasChar∊firstPart
         ind←firstPart⍳AliasChar
         (alias question)←ind{(⍺↑⍵)(⍺↓⍵)}firstPart
         flag←0<+/bool←({⍵↑⍨⍵⍳AliasChar}¨YesOrNo_Answers[;1])≡¨⊂alias
     :ElseIf ~flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂question
     :AndIf ~flag←0<+/bool←question∘{⍵≡(≢⍵)↑⍺}¨YesOrNo_Answers[;1]
     :AndIf LF∊question
         buff←{⍵↓⍨+/∧\' '=⍵}⊃¯1↑LF(≠⊆⊢)question
         flag←0<+/bool←YesOrNo_Answers[;1]≡¨⊂buff
     :EndIf
     :If flag
         'Multiple pre-prepared answers qualify?!'Assert 1=+/bool
         answer←2⊃YesOrNo_Answers[bool⍳1;]
         :If 0=≢answer
             yesOrNo←default
         :Else
             ('Invalid answer: ',answer)Assert answer∊'YyNn'
             yesOrNo←answer∊'Yy'
         :EndIf
     :EndIf
 :Else
     flag←0
 :EndIf
 :If ~flag
     :If 0=≢default
         add←' (y/n) '
     :Else
         :If default
             add←' (Y/n) '
         :Else
             add←' (y/N) '
         :EndIf
     :EndIf
     :If 1<≡question
         question←1↓⊃,/LF,¨question
     :EndIf
     :If (⌊/firstPart⍳' ',LF)>firstPart⍳AliasChar
         question←{~AliasChar∊⍵:⍵ ⋄ ⍵↓⍨⍵⍳AliasChar}question,add
     :Else
         question,←add
     :EndIf
     :Repeat
         ⎕←''
         ⍞←question
         answer←⍞
         :If answer≡question ⍝ Did ...  (since version 18.0 trailing blanks are not removed anymore)
         :OrIf (≢answer)=¯1+≢question ⍝ ... the ...
         :OrIf 0=≢answer                                                          ⍝ ... user ...
         :OrIf question≡(-≢question)↑answer                                       ⍝ ... just ...
             dtb←{⍵↓⍨-+/∧\' '=⌽⍵}
             answer2←dtb answer
         :OrIf answer2≡((-≢answer2)↑LF{~⍺∊⍵:⍵ ⋄ ' ',dtb ⍺{⌽⍵↑⍨1+⍵⍳⍺}⌽⍵}question)  ⍝ ... press ...
         :OrIf answer≡{1↓⊃¯1↑(⍵=LF)⊂⍵}LF,question                                 ⍝ ... <enter>?
             :If 0≠≢default
                 yesOrNo←default
                 isOkay←1
             :EndIf
         :Else
             :If '∘∘∘'≡¯3↑answer
                 (1+⊃⎕LC)⎕STOP⊃⎕SI
                 ∘∘∘ ⍝ Deliberate stop caused by user input
             :EndIf
             answer←¯1↑{⍵↓⍨-+/∧\' '=⌽⍵}answer
             :If answer∊'YyNn'
                 isOkay←1
                 yesOrNo←answer∊'Yy'
             :EndIf
         :EndIf
     :Until isOkay
 :EndIf
⍝Done
