(
 '`MakeHelpers` is a package that assists you in creating a new version of a package or an application, or something'
 'in between. It does not do the job for you, it just makes it easier.'
 ''
 'If you need an example then `MakeHelpers`''s own `Make` function is a good starting point:'
 ''
 '```'
 '     ∇ {r}←{batch}Make flag;M;C;zipFile;fn1;fn2;caption1;caption2;path             '
 '[1]   ⍝ Creates a new version of MakeHelpers in the Dist/ folder.\\                     '
 '[2]   ⍝  * The user is asked whether the better version of the script is           '
 '[3]   ⍝    copied from either `MyUCMDs/` or the project (if they differ)           '
 '[4]   ⍝  * The user is also asked whether the new newly built version              '
 '[5]   ⍝    should be installed in `MyUCMDs/`                                       '
 '[6]   ⍝ If `batch` is 1 (default is 0) none of this happens.\\                     '
 '[7]   ⍝ Returns always ⍬                                                           '
 '[8]    r←⍬                                                                         '
 '[9]    batch←{0<⎕NC ⍵:⍎⍵ ⋄ 0}''batch''                                               '
 '[10]   :If flag                                                                    '
 '[11]       M←##.MakeHelpers                                                             '
 '[12]       C←##.CiderConfig                                                        '
 '[13]       ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                 '
 '[14]       path←⎕NS''''            ⍝ holds all paths                                 '
 '[15]       path.target←C.HOME,''/Dist/''                                             '
 '[16]       path.temp←(M.F.GetTempSubDir''MakeHelpers''),''/''                               '
 '[17]       path.myUCMDs←M.GetMyUCMDsFolder''MakeHelpers''                                 '
 '[18]       ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝                                 '
 '[19]       M.RecreateFolder path.target                                            '
 '[20]       fn1←path.myUCMDs,''/MakeHelpers_uc.dyalog''                                    '
 '[21]       fn2←C.HOME,''/'',C.CIDER.source,''/MakeHelpers_uc.dyalog''                       '
 '[22]       :If ⎕NEXISTS fn1                                                        '
 '[23]           caption1←''MyUCMDs/''                                                 '
 '[24]           caption2←C.CIDER.source,''/''                                         '
 '[25]           batch M.CopyBetter fn1 fn2 caption1 caption2                        '
 '[26]       :EndIf                                                                  '
 '[27]       (C.HOME,''/'',C.CIDER.source,''/MakeHelpers_uc.dyalog'')M.CopyTo path.temp       '
 '[28]       (C.HOME,''/apl-package.json'')M.CopyTo path.temp                          '
 '[29]       (C.HOME,''/packages/apl-dependencies.txt'')M.CopyTo path.temp             '
 '[30]       (C.HOME,''/'',C.CIDER.source,''/MakeHelpers/*'')M.CopyTo path.temp,C.CIDER.source'
 '[31]       (C.HOME,''/packages/*'')M.CopyTo path.temp,''packages/''                    '
 '[32]       (path.temp,C.CIDER.source,''/API'')M.CreateAPI M M.Public                 '
 '[33]       (⊂⍕⎕TS)⎕NPUT path.temp,''CreatedAt.txt''                                  '
 '[34]       zipFile←⎕SE.Tatin.Pack path.temp path.target                            '
 '[35]       (path.temp,''*'')M.CopyTo path.target,''MakeHelpers''                            '
 '[36]       ⎕←''*** Built of new version successful:'',(⎕UCS 10),''   '',zipFile        '
 '[37]       :If 0=batch                                                             '
 '[38]       :AndIf 1 M.YesOrNo''Install new version as user command in MyUCMDs/ ?''   '
 '[39]           M.RecreateFolder path.myUCMDs                                       '
 '[40]           (path.target,''MakeHelpers/*'')M.CopyTo path.myUCMDs                       '
 '[41]           ⎕←''   Done''                                                         '
 '[42]       :EndIf                                                                  '
 '[43]   :EndIf                                                                      '
 '[44]  ⍝Done                                                                        '
 '     ∇'
 '```         '
 ''
 'The general idea is to collect everything that is going to be required by the package "Maker" into a temporary'
 'folder. From there a ZIP file is created in the `Dist/` folder. Then the contents of the `Dist/` folder is'
 'copied into `Dist/MakeHelpers`. Finally the user command is potentially (re-) installed in `MyUCMDs/`.'
 ''
 '**In detail:**'
 ''
 'Line 9'
 ''
 ': `batch` defaults to 0. Pass a 1 when `Make` is called by a test cases that should not interact with a user,'
 ': or when it is part of an automated build process.'
 ''
 'Line 10'
 ''
 ': This is just a safety net against accidental calls.'
 ''
 'Line 11+12'
 ''
 ': Creates useful references that make the code way more readable'
 ''
 'Line 14-17'
 ''
 ': Create paths we are going to need in the process'
 ''
 'Line 14'
 ''
 ': Remove and then create again the `Dist/` folder'
 ''
 'Line 19'
 ''
 ': Check whether the version number in the package config file and the one returned by the `Version` function do match.'
 ''
 'Line 21-27'
 ''
 ': Check whether there is a user command MakeHelpers in the `MyUCMDs/` folder, and if there is, compare with the one in the'
 ': project, and if they differ, ask the user whether she want to copy over the "better" one.'
 ''
 'Line 28-32'
 ''
 ': Copy the user command script and the package config file and the dependency file and all dependencies and all the code over.'
 ''
 'Line 33'
 ''
 ': Establish an API in the sub-namespace `API`. This are either thin cover functions or references to scripts or variables.'
 ''
 'Line 34'
 ''
 ': Create a file with a timestamp that we can later use for figuring out whether "MakeHelpers" in `MyUCMDs/` got changed and should'
 ': therefore be reloaded.'
 ''
 'Line 35'
 ''
 ': Create a ZIP that is effectively a Tatin package: everything that lives in the temp path is zipped; the ZIP file goes into `Dist/`.'
 ''
 'Line 36'
 ''
 ': Copy the contents ot the ZIP file to `Dist/`.'
 ''
 'Line 40+41'
 ''
 ': Install the new version in the `MyUCMDs/` folder if `Make` does not run in batch mode and the user confirms that she wants that.'
 ''
 'Note that there are two functions available that do the whole job of creating a Tatin package:'
 ''
 '* `CreateTatinPackageFromNamespace`'
 '* `CreateTatinPackageFromSingleScript`'
 ''
 'Both make some assumptions1:'
 ''
 '1. The project from which they are supposed to create a Tatin package from must be managed by Cider'
 '2. There must be a function `Version` available, either as a public shared method in case it is a single script or a trad function'
 '   in case it is an ordinary function. The function must be niladic and return a result. The result must be one of:'
 '   '
 '   * A simple text vector like "1.4.5" or "1.3.4-beta-1+987"'
 '   * A nested vector of length three with name, version number (see above) and version date (like ''2022-08-03'')'
 '3. If is it a single script it is expected to live in the root of the project'
 '4. If is it an ordinary namespace it is expected to live in a folder with the name of the project which in turn lives in what the '
 '   "source" parameter of the Tatin package config file defines'
)
